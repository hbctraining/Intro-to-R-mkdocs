{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Introduction to R Audience Computational skills required Duration Biologists None 4-session online workshop (~ 8 hours of trainer-led time)"},{"location":"#description","title":"Description","text":"<p>This repository has teaching materials for a hands-on Introduction to R workshop taught online. The workshop will introduce participants to the basics of R and RStudio. R is a simple programming environment that enables the effective handling of data, while providing excellent graphical support. RStudio is a tool that provides a user-friendly environment for working with R. These materials are intended to provide both basic R programming knowledge and its application for increasing efficiency for data analysis. </p> <p>Note for Trainers</p> <p>The schedule linked below assumes that learners will spend between 2-3 hours on reading through, and completing exercises from selected lessons between classes. The online component of the workshop focuses on more exercises and discussion.</p>"},{"location":"#learning-objectives","title":"Learning Objectives","text":"<ol> <li> <p>R syntax: </p> <p>Familiarize the basic syntax and the use of Rstudio.</p> </li> <li> <p>Data types and data structures: </p> <p>Describe frequently-used data types and data structures in R.</p> </li> <li> <p>Data inspection and wrangling: </p> <p>Demonstrate the utilization of functions and indices to inspect and subset data from various data structures.</p> </li> <li> <p>Data visualization:</p> <p>Apply the ggplot2 package to create plots for data visualization.</p> </li> </ol>"},{"location":"#setup-requirements","title":"Setup Requirements","text":"<p>Download the most recent version of R and RStudio for the appropriate OS following the links below. </p> <p> R software download</p> <p> RStudio download</p> <p>All the files used in the lessons are linked within, but can also be accessed through the link below.</p> <p> Dataset download</p>"},{"location":"#lessons","title":"Lessons","text":"<ul> <li> <p>Trainer led workshop Click here</p> </li> <li> <p>Self learning materials Click here</p> </li> </ul> <p>Citation</p> <ul> <li> <p>To cite material from this course in your publications, please use:</p> <p>Meeta Mistry, Mary Piper, Jihe Liu, &amp; Radhika Khetani. (2021, May 5). hbctraining/Intro-to-R-flipped: R workshop first release. Zenodo. https://doi.org/10.5281/zenodo.4739342</p> </li> <li> <p>A lot of time and effort went into the preparation of these materials. Citations help us understand the needs of the community, gain recognition for our work, and attract further funding to support our teaching activities. Thank you for citing this material if it helped you in your data analysis.</p> </li> </ul> <p>Attribution notice</p> <ul> <li> <p>These materials have been developed by members of the teaching team at the Harvard Chan Bioinformatics Core (HBC). These are open access materials distributed under the terms of the Creative Commons Attribution license (CC BY 4.0), which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.</p> </li> <li> <p>Some materials used in these lessons were derived from work that is Copyright \u00a9 Data Carpentry. All Data Carpentry instructional material is made available under the Creative Commons Attribution license (CC BY 4.0)</p> </li> </ul>"},{"location":"exercises/functions_and_arguments/","title":"Functions in R","text":"<p>Approximate time: 30 min</p>"},{"location":"exercises/functions_and_arguments/#learning-objectives","title":"Learning Objectives","text":"<ul> <li>Describe and utilize functions in R. </li> <li>Modify default behavior of a function using arguments.</li> <li>Identify R-specific sources of obtaining more information about functions.</li> <li>Demonstrate how to create user-defined functions in R</li> </ul>"},{"location":"exercises/functions_and_arguments/#functions-and-their-arguments","title":"Functions and their arguments","text":""},{"location":"exercises/functions_and_arguments/#what-are-functions","title":"What are functions?","text":"<p>A key feature of R is functions. Functions are \"self contained\" modules of code that accomplish a specific task. Functions usually take in some sort of data structure (value, vector, dataframe etc.), process it, and return a result.</p> <p>The general usage for a function is the name of the function followed by parentheses:</p> <p><pre><code>function_name(input)\n</code></pre> The input(s) are called arguments, which can include:</p> <ol> <li>the physical object (any data structure) on which the function carries out a task </li> <li>specifications that alter the way the function operates (e.g. options)</li> </ol> <p>Not all functions take arguments, for example:</p> <pre><code>getwd()\n</code></pre> <p>However, most functions can take several arguments. If you don't specify a required argument when calling the function, you will either receive an error or the function will fall back on using a default. </p> <p>The defaults represent standard values that the author of the function specified as being \"good enough in standard cases\". An example would be what symbol to use in a plot. However, if you want something specific, simply change the argument yourself with a value of your choice.</p>"},{"location":"exercises/functions_and_arguments/#basic-functions","title":"Basic functions","text":"<p>We have already used a few examples of basic functions in the previous lessons i.e <code>getwd()</code>, <code>c()</code>, and  <code>factor()</code>. These functions are available as part of R's built in capabilities, and we will explore a few more of these base functions below. </p> <p>Let's revisit a function that we have used previously to combine data <code>c()</code> into vectors. The arguments it takes is a collection of numbers, characters or strings (separated by a comma). The <code>c()</code> function performs the task of combining the numbers or characters into a single vector. You can also use the function to add elements to an existing vector:</p> <pre><code>glengths &lt;- c(glengths, 90) # adding at the end \nglengths &lt;- c(30, glengths) # adding at the beginning\n</code></pre> <p>What happens here is that we take the original vector <code>glengths</code> (containing three elements), and we are adding another item to either end. We can do this over and over again to build a vector or a dataset.</p> <p>Since R is used for statistical computing, many of the base functions involve mathematical operations. One example would be the function <code>sqrt()</code>. The input/argument must be a number, and the output is the square root of that number. Let's try finding the square root of 81:</p> <pre><code>sqrt(81)\n</code></pre> <p>Now what would happen if we called the function (e.g. ran the function), on a vector of values instead of a single value? </p> <pre><code>sqrt(glengths)\n</code></pre> <p>In this case the task was performed on each individual value of the vector <code>glengths</code> and the respective results were displayed.</p> <p>Let's try another function, this time using one that we can change some of the options (arguments that change the behavior of the function), for example <code>round</code>:</p> <pre><code>round(3.14159)\n</code></pre> <p>We can see that we get <code>3</code>. That's because the default is to round to the nearest whole number. What if we want a different number of significant digits? Let's first learn how to find available arguments for a function.</p>"},{"location":"exercises/functions_and_arguments/#seeking-help-on-arguments-for-functions","title":"Seeking help on arguments for functions","text":"<p>The best way of finding out this information is to use the <code>?</code> followed by the name of the function. Doing this will open up the help manual in the bottom right panel of RStudio that will provide a description of the function, usage, arguments, details, and examples: </p> <pre><code>?round\n</code></pre> <p>Alternatively, if you are familiar with the function but just need to remind yourself of the names of the arguments, you can use:</p> <pre><code>args(round)\n</code></pre> <p>Even more useful is the <code>example()</code> function. This will allow you to run the examples section from the Online Help to see exactly how it works when executing the commands. Let's try that for <code>round()</code>:</p> <pre><code>example(\"round\")\n</code></pre> <p>In our example, we can change the number of digits returned by adding an argument. We can type <code>digits=2</code> or however many we may want:</p> <pre><code>round(3.14159, digits=2)\n</code></pre> <p>Note</p> <p>If you provide the arguments in the exact same order as they are defined (in the help manual) you don't have to name them:</p> <p><pre><code>round(3.14159, 2)\n</code></pre> However, it's usually not recommended practice because it involves a lot of memorization. In addition, it makes your code difficult to read for your future self and others, especially if your code includes functions that are not commonly used. (It's however OK to not include the names of the arguments for basic functions like <code>mean</code>, <code>min</code>, etc...). Another advantage of naming arguments, is that the order doesn't matter. This is useful when a function has many arguments. </p> <p>Exercise</p> <ol> <li> <p>Let's use base R function to calculate mean value of the <code>glengths</code> vector. You might need to search online to find what function can perform this task.</p> </li> <li> <p>Create a new vector <code>test &lt;- c(1, NA, 2, 3, NA, 4)</code>. Use the same base R function from exercise 1 (with addition of proper argument), and calculate mean value of the <code>test</code> vector. The output should be <code>2.5</code>.</p> <p>NOTE: In R, missing values are represented by the symbol <code>NA</code> (not available). It\u2019s a way to make sure that users know they have missing data, and make a conscious decision on how to deal with it. There are ways to ignore <code>NA</code> during statistical calculation, or to remove <code>NA</code> from the vector. If you want more information related to missing data or <code>NA</code> you can go to this page (please note that there are many advanced concepts on that page that have not been covered in class).</p> </li> <li>Another commonly used base function is <code>sort()</code>. Use this function to sort the <code>glengths</code> vector in descending order.</li> </ol>"},{"location":"exercises/functions_and_arguments/#user-defined-functions","title":"User-defined Functions","text":"<p>One of the great strengths of R is the user's ability to add functions. Sometimes there is a small task (or series of tasks) you need done and you find yourself having to repeat it multiple times. In these types of situations, it can be helpful to create your own custom function. The structure of a function is given below:</p> <pre><code>name_of_function &lt;- function(argument1, argument2) {\n    statements or code that does something\n    return(something)\n}\n</code></pre> <ul> <li>First you give your function a name. </li> <li>Then you assign value to it, where the value is the function. </li> </ul> <p>When defining the function you will want to provide the list of arguments required (inputs and/or options to modify behaviour of the function), and wrapped between curly brackets place the tasks that are being executed on/using those arguments.  The argument(s) can be any type of object (like a scalar, a matrix, a dataframe, a vector, a logical, etc), and it\u2019s not necessary to define what it is in any way. </p> <p>Finally, you can \u201creturn\u201d the value of the object from the function, meaning pass the value of it into the global environment. The important idea behind functions is that objects that are created within the function are local to the environment of the function \u2013 they don\u2019t exist outside of the function. </p> <p>Let's try creating a simple example function. This function will take in a numeric value as input, and return the squared value.</p> <pre><code>square_it &lt;- function(x) {\n    square &lt;- x * x\n    return(square)\n}\n</code></pre> <p>Once you run the code, you should see a function named <code>square_it</code> in the Environment panel (located at the top right of Rstudio interface). Now, we can use this function as any other base R functions. We type out the name of the function, and inside the parentheses  we provide a numeric value <code>x</code>:</p> <pre><code>square_it(5)\n</code></pre> <p>Pretty simple, right? In this case, we only had one line of code that was run, but in theory you could have many lines of code to get obtain the final results that you want to \"return\" to the user. </p> <p>Do I always have to <code>return()</code> something at the end of the function?</p> <p>In the example above, we created a new variable called <code>square</code> inside the function, and then return the value of <code>square</code>. If you don't use <code>return()</code>, by default R will return the value of the last line of code inside that function. That is to say, the following function will also work. </p> <p><pre><code>square_it &lt;- function(x) {\n    x * x\n}\n</code></pre> However, we recommend always using <code>return</code> at the end of a function as the best practice.</p> <p>We have only scratched the surface here when it comes to creating functions! We will revisit this in later lessons, but if interested you can also find more detailed information on this R-bloggers site, which is where we adapted this example from.</p> <p>Exercise</p> <ol> <li>Write a function called <code>multiply_it</code>, which takes two inputs: a numeric value <code>x</code>, and a numeric value <code>y</code>. The function will return the product of these two numeric values, which is <code>x * y</code>. For example, <code>multiply_it(x=4, y=6)</code> will return output <code>24</code>.</li> </ol> <p>Attribution notice</p> <p>This lesson has been developed by members of the teaching team at the Harvard Chan Bioinformatics Core (HBC). These are open access materials distributed under the terms of the Creative Commons Attribution license (CC BY 4.0), which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.</p> <ul> <li>The materials used in this lesson are adapted from work that is Copyright \u00a9 Data Carpentry (http://datacarpentry.org/). All Data Carpentry instructional material is made available under the Creative Commons Attribution license (CC BY 4.0).</li> </ul>"},{"location":"exercises/packages_and_libraries/","title":"Packages and libraries","text":"<p>Approximate time: 25 min</p>"},{"location":"exercises/packages_and_libraries/#learning-objectives","title":"Learning Objectives","text":"<ul> <li>Explain different ways to install external R packages</li> <li>Demonstrate how to load a library and how to find functions specific to a package </li> </ul>"},{"location":"exercises/packages_and_libraries/#packages-and-libraries","title":"Packages and Libraries","text":"<p>Packages are collections of R functions, data, and compiled code in a well-defined format, created to add specific functionality. There are 10,000+ user contributed packages and growing.</p> <p>There are a set of standard (or base) packages which are considered part of the R source code and automatically available as part of your R installation. Base packages contain the basic functions that allow R to work, and enable standard statistical and graphical functions on datasets; for example, all of the functions that we have been using so far in our examples. </p> <p>The directories in R where the packages are stored are called the libraries. The terms package and library are sometimes used synonymously and there has been discussion amongst the community to resolve this. It is somewhat counter-intuitive to load a package using the <code>library()</code> function and so you can see how confusion can arise.</p> <p>You can check what libraries are loaded in your current R session by typing into the console:</p> <pre><code>sessionInfo() #Print version information about R, the OS and attached or loaded packages\n\n# OR\n\nsearch() #Gives a list of attached packages\n</code></pre> <p>Previously we have introduced you to functions from the standard base packages. However, the more you work with R, you will come to realize that there is a cornucopia of R packages that offer a wide variety of functionality. To use additional packages will require installation. Many packages can be installed from the CRAN or Bioconductor repositories.</p> <p>Helpful tips for package installations</p> <ul> <li>Package names are case sensitive!</li> <li>At any point (especially if you\u2019ve used R/Bioconductor in the past), in the console R may ask you if you want to \"update any old packages by asking Update all/some/none? [a/s/n]:\". If you see this, type \"a\" at the prompt and hit Enter to update any old packages. Updating packages can sometimes take awhile to run. If you are short on time, you can choose \"n\" and proceed. Without updating, you run the risk of conflicts between your old packages and the ones from your updated R version later down the road. </li> <li>If you see a message in your console along the lines of \u201cbinary version available but the source version is later\u201d, followed by a question, \u201cDo you want to install from sources the package which needs compilation? y/n\u201d, type n for no, and hit enter.</li> </ul>"},{"location":"exercises/packages_and_libraries/#package-installation-from-cran","title":"Package installation from CRAN","text":"<p>CRAN is a repository where the latest downloads of R (and legacy versions) are found in addition to source code for thousands of different user contributed R packages.</p> <p></p> <p>Packages for R can be installed from the CRAN package repository using the <code>install.packages</code> function. This function will download the source code from on the CRAN mirrors and install the package (and any dependencies) locally on your computer. </p> <p>An example is given below for the <code>ggplot2</code> package that will be required for some plots we will create later on. Run this code to install <code>ggplot2</code>.</p> <pre><code>install.packages(\"ggplot2\")\n</code></pre>"},{"location":"exercises/packages_and_libraries/#package-installation-from-bioconductor","title":"Package installation from Bioconductor","text":"<p>Alternatively, packages can also be installed from Bioconductor, another repository of packages which provides tools for the analysis and comprehension of high-throughput genomic data. These packages includes (but is not limited to) tools for performing statistical analysis, annotation packages, and accessing public datasets.</p> <p></p> <p>There are many packages that are available in CRAN and Bioconductor, but there are also packages that are specific to one repository. Generally, you can find out this information with a Google search or by trial and error. </p> <p>To install from Bioconductor, you will first need to install BiocManager. This only needs to be done once ever for your R installation. </p> <p>Do Not Run This!</p> <pre><code>install.packages(\"BiocManager\")\n</code></pre> <p>Now you can use the <code>install()</code> function from the <code>BiocManager</code> package to install a package by providing the name in quotations. </p> <p>Here we have the code to install <code>ggplot2</code>, through Bioconductor:</p> <p>Do Not Run This!</p> <pre><code>BiocManager::install(\"ggplot2\")\n</code></pre> <p>Note</p> <p>The code above may not be familiar to you - it is essentially using a new operator, a double colon <code>::</code> to execute a function from a particular package. This is the syntax: <code>package::function_name()</code>. </p>"},{"location":"exercises/packages_and_libraries/#package-installation-from-source","title":"Package installation from source","text":"<p>Finally, R packages can also be installed from source. This is useful when you do not have an internet connection (and have the source files locally), since the other two methods are retrieving the source files from remote sites. </p> <p>To install from source, we use the same <code>install.packages</code> function but we have additional arguments that provide specifications to change from defaults:</p> <p>Do Not Run This!</p> <pre><code>install.packages(\"~/Downloads/ggplot2_1.0.1.tar.gz\", type=\"source\", repos=NULL)\n</code></pre>"},{"location":"exercises/packages_and_libraries/#loading-libraries","title":"Loading libraries","text":"<p>Once you have the package installed, you can load the library into your R session for use. Any of the functions that are specific to that package will be available for you to use by simply calling the function as you would for any of the base functions. Note that quotations are not required here.</p> <pre><code>library(ggplot2)\n</code></pre> <p>You can also check what is loaded in your current environment by using <code>sessionInfo()</code> or <code>search()</code> and you should see your package listed as:</p> <pre><code>other attached packages:\n[1] ggplot2_2.0.0\n</code></pre> <p>In this case there are several other packages that were also loaded along with <code>ggplot2</code>.</p> <p>We only need to install a package once on our computer. However, to use the package, we need to load the library every time we start a new R/RStudio environment. You can think of this as installing a bulb versus turning on the light. </p> <p></p> <p>Analogy and image credit to Dianne Cook of Monash University. </p>"},{"location":"exercises/packages_and_libraries/#finding-functions-specific-to-a-package","title":"Finding functions specific to a package","text":"<p>This is your first time using <code>ggplot2</code>, how do you know where to start and what functions are available to you? One way to do this, is by using the <code>Package</code> tab in RStudio. If you click on the tab, you will see listed all packages that you have installed. For those libraries that you have loaded, you will see a blue checkmark in the box next to it. Scroll down to <code>ggplot2</code> in your list:</p> <p> </p> <p>If your library is successfully loaded you will see the box checked, as in the screenshot above. Now, if you click on <code>ggplot2</code> RStudio will open up the help pages and you can scroll through.</p> <p>An alternative is to find the help manual online, which can be less technical and sometimes easier to follow. For example, this website is much more comprehensive for ggplot2 and is the result of a Google search. Many of the Bioconductor packages also have very helpful vignettes that include comprehensive tutorials with mock data that you can work with.</p> <p>If you can't find what you are looking for, you can use the rdocumention.org website that search through the help files across all packages available.</p> <p>Exercise</p> <p>The <code>ggplot2</code> package is part of the <code>tidyverse</code> suite of integrated packages which was designed to work together to make common data science operations more user-friendly. We will be using the <code>tidyverse</code> suite in later lessons, and so let's install it. </p> <p>NOTE:</p> <p>This suite of packages is only available in CRAN._ </p> <p>Attribution notice</p> <ul> <li> <p>This lesson has been developed by members of the teaching team at the Harvard Chan Bioinformatics Core (HBC). These are open access materials distributed under the terms of the Creative Commons Attribution license (CC BY 4.0), which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.</p> </li> <li> <p>The materials used in this lesson are adapted from work that is Copyright \u00a9 Data Carpentry (http://datacarpentry.org/).All Data Carpentry instructional material is made available under the Creative Commons Attribution license (CC BY 4.0).</p> </li> </ul>"},{"location":"exercises/r_syntax_and_data_structures/","title":"R Syntax and Data Structures","text":"<p>Approximate time: 70 min</p>"},{"location":"exercises/r_syntax_and_data_structures/#learning-objectives","title":"Learning Objectives","text":"<ul> <li>Describe frequently-used data types in R. </li> <li>Construct data structures to store data.</li> </ul>"},{"location":"exercises/r_syntax_and_data_structures/#data-types","title":"Data Types","text":"<p>Variables can contain values of specific types within R. The six data types that R uses include: </p> <ul> <li><code>\"numeric\"</code> for any numerical value, including whole numbers and decimals. This is the most common data type for performing mathematical operations.</li> <li><code>\"character\"</code> for text values, denoted by using quotes (\"\") around value. For instance, while 5 is a numeric value, if you were to put quotation marks around it, it would turn into a character value, and you could no longer use it for mathematical operations. Single or double quotes both work, as long as the same type is used at the beginning and end of the character value.</li> <li><code>\"integer\"</code> for whole numbers (e.g., <code>2L</code>, the <code>L</code> indicates to R that it's an integer). It behaves similar to the <code>numeric</code> data type for most tasks or functions; however, it takes up less storage space than numeric data, so often tools will output integers if the data is known to be comprised of whole numbers. Just know that integers behave similarly to numeric values. If you wanted to create your own, you could do so by providing the whole number, followed by an upper-case L.</li> <li><code>\"logical\"</code> for <code>TRUE</code> and <code>FALSE</code> (the Boolean data type). The <code>logical</code> data type can be specified using four values, <code>TRUE</code> in all capital letters, <code>FALSE</code> in all capital letters, a single capital <code>T</code> or a single capital <code>F</code>.</li> <li><code>\"complex\"</code> to represent complex numbers with real and imaginary parts (e.g.,   <code>1+4i</code>) and that's all we're going to say about them</li> <li><code>\"raw\"</code> that we won't discuss further</li> </ul> <p>The table below provides examples of each of the commonly used data types:</p> Data Type Examples Numeric: 1, 1.5, 20, pi Character: \u201canytext\u201d, \u201c5\u201d, \u201cTRUE\u201d Integer: 2L, 500L, -17L Logical: TRUE, FALSE, T, F <p>The type of data will determine what you can do with it. For example, if you want to perform mathematical operations, then your data type cannot be character or logical. Whereas if you want to search for a word or pattern in your data, then you data should be of the character data type. The task or function being performed on the data will determine what type of data can be used. </p>"},{"location":"exercises/r_syntax_and_data_structures/#data-structures","title":"Data Structures","text":"<p>We know that variables are like buckets, and so far we have seen that bucket filled with a single value. Even when <code>number</code> was created, the result of the mathematical operation was a single value. Variables can store more than just a single value, they can store a multitude of different data structures. These include, but are not limited to, vectors (<code>c</code>), factors (<code>factor</code>), matrices (<code>matrix</code>), data frames (<code>data.frame</code>) and lists (<code>list</code>).</p>"},{"location":"exercises/r_syntax_and_data_structures/#vectors","title":"Vectors","text":"<p>A vector is the most common and basic data structure in R, and is pretty much the workhorse of R. It's basically just a collection of values, mainly either numbers,</p> <p></p> <p>or characters,</p> <p></p> <p>or logical values,</p> <p></p> <p>Note</p> <p>All values in a vector must be of the same data type. </p> <p>If you try to create a vector with more than a single data type, R will try to coerce it into a single data type. </p> <p>For example, if you were to try to create the following vector:</p> <p></p> <p>R will coerce it into:</p> <p></p> <p>The analogy for a vector is that your bucket now has different compartments; these compartments in a vector are called elements. </p> <p>Each element contains a single value, and there is no limit to how many elements you can have. A vector is assigned to a single variable, because regardless of how many elements it contains, in the end it is still a single entity (bucket). </p> <p>Let's create a vector of genome lengths and assign it to a variable called <code>glengths</code>. </p> <p>Each element of this vector contains a single numeric value, and three values will be combined together into a vector using <code>c()</code> (the combine function). All of the values are put within the parentheses and separated with a comma.</p> <pre><code># Create a numeric vector and store the vector as a variable called 'glengths'\nglengths &lt;- c(4.6, 3000, 50000)\nglengths\n</code></pre> <p>Note</p> <p>Your environment shows the <code>glengths</code> variable is numeric (num) and tells you the <code>glengths</code> vector starts at element 1 and ends at element 3 (i.e. your vector contains 3 values) as denoted by the [1:3].*</p> <p>A vector can also contain characters. Create another vector called <code>species</code> with three elements, where each element corresponds with the genome sizes vector (in Mb).</p> <p><pre><code># Create a character vector and store the vector as a variable called 'species'\nspecies &lt;- c(\"ecoli\", \"human\", \"corn\")\nspecies\n</code></pre> What do you think would happen if we forgot to put quotations around one of the values? Let's test it out with corn.</p> <pre><code># Forget to put quotes around corn\nspecies &lt;- c(\"ecoli\", \"human\", corn)\n</code></pre> <p>Note</p> <p>RStudio is quite helpful in color-coding the various data types. We can see that our numeric values are blue, the character values are green, and if we forget to surround corn with quotes, it's black. What does this mean? Let's try to run this code.</p> <p>When we try to run this code we get an error specifying that object 'corn' is not found. What this means is that R is looking for an object or variable in my Environment called 'corn', and when it doesn't find it, it returns an error. If we had a character vector called 'corn' in our Environment, then it would combine the contents of the 'corn' vector with the values \"ecoli\" and \"human\".</p> <p>Since we only want to add the value \"corn\" to our vector, we need to re-run the code with the quotation marks surrounding corn. A quick way to add quotes to both ends of a word in RStudio is to highlight the word, then press the quote key.</p> <pre><code># Create a character vector and store the vector as a variable called 'species'\nspecies &lt;- c(\"ecoli\", \"human\", \"corn\")\n</code></pre> <p>Exercise</p> <p>Try to create a vector of numeric and character values by combining the two vectors that we just created (<code>glengths</code> and <code>species</code>). Assign this combined vector to a new variable called <code>combined</code>. Hint: you will need to use the combine <code>c()</code> function to do this. </p> <p>Print the <code>combined</code> vector in the console, what looks different compared to the original vectors?</p>"},{"location":"exercises/r_syntax_and_data_structures/#factors","title":"Factors","text":"<p>A factor is a special type of vector that is used to store categorical data. Each unique category is referred to as a factor level (i.e. category = level). Factors are built on top of integer vectors such that each factor level is assigned an integer value, creating value-label pairs. </p> <p>For instance, if we have four animals and the first animal is female, the second and third are male, and the fourth is female, we could create a factor that appears like a vector, but has integer values stored under-the-hood. The integer value assigned is a one for females and a two for males. The numbers are assigned in alphabetical order, so because the f- in females comes before the m- in males in the alphabet, females get assigned a one and males a two. In later lessons we will show you how you could change these assignments.</p> <p></p> <p>Let's create a factor vector and explore a bit more.  We'll start by creating a character vector describing three different levels of expression. Perhaps the first value represents expression in mouse1, the second value represents expression in mouse2, and so on and so forth:</p> <pre><code># Create a character vector and store the vector as a variable called 'expression'\nexpression &lt;- c(\"low\", \"high\", \"medium\", \"high\", \"low\", \"medium\", \"high\")\n</code></pre> <p>Now we can convert this character vector into a factor using the <code>factor()</code> function:</p> <pre><code># Turn 'expression' vector into a factor\nexpression &lt;- factor(expression)\n</code></pre> <p>So, what exactly happened when we applied the <code>factor()</code> function? </p> <p></p> <p>The expression vector is categorical, in that all the values in the vector belong to a set of categories; in this case, the categories are <code>low</code>, <code>medium</code>, and <code>high</code>. By turning the expression vector into a factor, the categories are assigned integers alphabetically, with high=1, low=2, medium=3. This in effect assigns the different factor levels. You can view the newly created factor variable and the levels in the Environment window.</p> <p></p> <p>So now that we have an idea of what factors are, when would you ever want to use them?</p> <p>Factors are extremely valuable for many operations often performed in R. For instance, factors can give order to values with no intrinsic order. In the previous 'expression' vector, if I wanted the low category to be less than the medium category, then we could do this using factors. Also, factors are necessary for many statistical methods. For example, descriptive statistics can be obtained for character vectors if you have the categorical information stored as a factor. Also, if you want to denote which category is your base level for a statistical comparison, then you would need to have your category variable stored as a factor with the base level assigned to 1. Anytime that it is helpful to have the categories thought of as groups in an analysis, the factor function makes this possible. For instance, if you want to color your plots by treatment type, then you would need the treatment variable to be a factor.</p> <p>Exercises</p> <p>Let's say that in our experimental analyses, we are working with three different sets of cells: normal, cells knocked out for geneA (a very exciting gene), and cells overexpressing geneA. We have three replicates for each celltype.</p> <ol> <li> <p>Create a vector named <code>samplegroup</code> with nine elements: 3 control (\"CTL\") values, 3 knock-out (\"KO\") values, and 3 over-expressing (\"OE\") values.</p> </li> <li> <p>Turn <code>samplegroup</code> into a factor data structure.</p> </li> </ol>"},{"location":"exercises/r_syntax_and_data_structures/#matrix","title":"Matrix","text":"<p>A <code>matrix</code> in R is a collection of vectors of same length and identical datatype. Vectors can be combined as columns in the matrix or by row, to create a 2-dimensional structure.</p> <p></p> <p>Matrices are used commonly as part of the mathematical machinery of statistics. They are usually of numeric datatype and used in computational algorithms to serve as a checkpoint. For example, if input data is not of identical data type (numeric, character, etc.), the <code>matrix()</code> function will throw an error and stop any downstream code execution.</p>"},{"location":"exercises/r_syntax_and_data_structures/#data-frame","title":"Data Frame","text":"<p>A <code>data.frame</code> is the de facto data structure for most tabular data and what we use for statistics and plotting. A <code>data.frame</code> is similar to a matrix in that it's a collection of vectors of the same length and each vector represents a column. However, in a dataframe each vector can be of a different data type (e.g., characters, integers, factors). In the data frame pictured below, the first column is character, the second column is numeric, the third is character, and the fourth is logical.</p> <p></p> <p>A data frame is the most common way of storing data in R, and if used systematically makes data analysis easier. </p> <p>We can create a dataframe by bringing vectors together to form the columns. We do this using the <code>data.frame()</code> function, and giving the function the different vectors we would like to bind together. This function will only work for vectors of the same length.</p> <pre><code># Create a data frame and store it as a variable called 'df'\ndf &lt;- data.frame(species, glengths)\n</code></pre> <p>We can see that a new variable called <code>df</code> has been created in our <code>Environment</code> within a new section called <code>Data</code>. In the <code>Environment</code>, it specifies that <code>df</code> has 3 observations of 2 variables. What does that mean? In R, rows always come first, so it means that <code>df</code> has 3 rows and 2 columns. We can get additional information if we click on the blue circle with the white triangle in the middle next to <code>df</code>. It will display information about each of the columns in the data frame, giving information about what the data type is of each of the columns and the first few values of those columns.</p> <p>Another handy feature in RStudio is that if we hover the cursor over the variable name in the <code>Environment</code>, <code>df</code>, it will turn into a pointing finger. If you click on <code>df</code>, it will open the data frame as it's own tab next to the script editor. We can explore the table interactively within this window. To close, just click on the X on the tab.</p> <p>As with any variable, we can print the values stored inside to the console if we type the variable's name and run. </p> <pre><code>df\n</code></pre> <p>Exercise</p> <p>Create a data frame called <code>favorite_books</code> with the following vectors as columns:</p> <pre><code>titles &lt;- c(\"Catch-22\", \"Pride and Prejudice\", \"Nineteen Eighty Four\")\npages &lt;- c(453, 432, 328)\n</code></pre>"},{"location":"exercises/r_syntax_and_data_structures/#lists","title":"Lists","text":"<p>Lists are a data structure in R that can be perhaps a bit daunting at first, but soon become amazingly useful. A list is a data structure that can hold any number of any types of other data structures.</p> <p></p> <p>If you have variables of different data structures you wish to combine, you can put all of those into one list object by using the <code>list()</code> function and placing all the items you wish to combine within parentheses:</p> <pre><code>list1 &lt;- list(species, df, number)\n</code></pre> <p>We see <code>list1</code> appear within the Data section of our environment as a list of 3 components or variables. If we click on the blue circle with a triangle in the middle, it's not quite as interpretable as it was for data frames. </p> <p>Essentially, each component is preceded by a colon. The first colon give the <code>species</code> vector, the second colon precedes the <code>df</code> data frame, with the dollar signs indicating the different columns, the last colon gives the single value, <code>number</code>.</p> <p>If I click on <code>list1</code>, it opens a tab where you can explore the contents a bit more, but it's still not super intuitive. The easiest way to view small lists is to print to the console. </p> <p>Let's type list1 and print to the console by running it.</p> <pre><code>list1\n\n[[1]]\n[1] \"ecoli\" \"human\" \"corn\" \n\n[[2]]\n  species glengths\n1   ecoli      4.6\n2   human   3000.0\n3    corn  50000.0\n\n[[3]]\n[1] 5\n</code></pre> <p>There are three components corresponding to the three different variables we passed in, and what you see is that structure of each is retained. Each component of a list is referenced based on the number position. We will talk more about how to inspect and manipulate components of lists in later lessons.</p> <p>Exercise</p> <p>Create a list called <code>list2</code> containing <code>species</code>, <code>glengths</code>, and <code>number</code>.</p> <p>Now that we know what lists are, why would we ever want to use them? When getting started with R, you will most likely encounter lists with different tools or functions that you use. Oftentimes a tool will need a list as input, so that all the information needed to run the tool is present in a single variable. Sometimes a tool will output a list when working through an analysis. Knowing how to work with them and extract necessary information will be critically important. </p> <p>As you become more comfortable with R, you will find yourself using lists more often. One common use of lists is to make iterative processes more efficient. For example, let's say you had multiple data frames containing the same weather information from different cities throughout North America. You wanted to perform the same task on each of the data frames, but that would take a long time to do individually. Instead you could create a list where each data frame is a component of the list. Then, you could perform the task on the list instead, which would be applied to each of the components.</p> <p>Attribution notice</p> <p>This lesson has been developed by members of the teaching team at the Harvard Chan Bioinformatics Core (HBC). These are open access materials distributed under the terms of the Creative Commons Attribution license (CC BY 4.0), which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.*</p> <p>The materials used in this lesson are adapted from work that is Copyright \u00a9 Data Carpentry (http://datacarpentry.org/). </p> <p>All Data Carpentry instructional material is made available under the Creative Commons Attribution license (CC BY 4.0).*</p>"},{"location":"exercises/reading_in_and_data_inspection/","title":"Data subsetting with base R: vectors and factors","text":""},{"location":"exercises/reading_in_and_data_inspection/#learning-objectives","title":"Learning Objectives","text":"<ul> <li>Demonstrate how to read existing data into R</li> <li>Utilize base R functions to inspect data structures</li> </ul>"},{"location":"exercises/reading_in_and_data_inspection/#reading-data-into-r","title":"Reading data into R","text":""},{"location":"exercises/reading_in_and_data_inspection/#the-basics","title":"The basics","text":"<p>Regardless of the specific analysis in R we are performing, we usually need to bring data in for any analysis being done in R, so learning how to read in data is a crucial component of learning to use R.</p> <p>Many functions exist to read data in, and the function in R you use will depend on the file format being read in. Below we have a table with some examples of functions that can be used for importing some common text data types (plain text).</p> <p> Data type Extension Function Package Comma separated values csv <code>read.csv()</code> utils (default) <code>read_csv()</code> readr (tidyverse) Tab separated values tsv <code>read_tsv()</code> readr Other delimited formats txt <code>read.table()</code> utils <code>read_table()</code> readr <code>read_delim()</code> readr <p></p> <p>For example, if we have text file where the columns are separated by commas (comma-separated values or comma-delimited), you could use the function <code>read.csv</code>. However, if the data are separated by a different delimiter in a text file (e.g. \":\", \";\", \" \"), you could use the generic <code>read.table</code> function and specify the delimiter (<code>sep = \" \"</code>) as an argument in the function. </p> <p>In the above table we refer to base R functions as being contained in the \"utils\" package. In addition to base R functions, we have also listed functions from some other packages that can be used to import data, specifically the \"readr\" package that installs when you install the \"tidyverse\" suite of packages.</p> <p>In addition to plain text files, you can also import data from other statistical analysis packages and Excel using functions from different packages. </p> <p> Data type Extension Function Package Stata version 13-14 dta <code>readdta()</code> haven Stata version 7-12 dta <code>read.dta()</code> foreign SPSS sav <code>read.spss()</code> foreign SAS sas7bdat <code>read.sas7bdat()</code> sas7bdat Excel xlsx, xls <code>read_excel()</code> readxl (tidyverse) <p></p> <p>Note</p> <p>These lists are not comprehensive, and may other functions exist for importing data. Once you have been using R for a bit, maybe you will have a preference for which functions you prefer to use for which data type.</p>"},{"location":"exercises/reading_in_and_data_inspection/#metadata","title":"Metadata","text":"<p>When working with large datasets, you will very likely be working with \"metadata\" file which contains the information about each sample in your dataset.</p> <p> <p> The metadata is very important information and we encourage you to think about creating a document with as much metadata you can record before you bring the data into R. Here is some additional reading on metadata from the HMS Data Management Working Group.</p>"},{"location":"exercises/reading_in_and_data_inspection/#the-readcsv-function","title":"The <code>read.csv()</code> function","text":"<p>Let's bring in the metadata file we downloaded earlier (<code>mouse_exp_design.csv</code> or <code>mouse_exp_design.txt</code>) using the <code>read.csv</code> function. </p> <p>First, check the arguments for the function using the <code>?</code> to ensure that you are entering all the information appropriately:</p> <p><pre><code>?read.csv\n</code></pre> <p></p> <p>The first thing you will notice is that you've pulled up the documentation for <code>read.table()</code>, this is because that is the parent function and all the other functions are in the same family. </p> <p>The next item on the documentation page is the function Description, which specifies that the output of this set of functions is going to be a data frame - \"Reads a file in table format and creates a data frame from it, with cases corresponding to lines and variables to fields in the file.\"</p> <p>In usage, all of the arguments listed for <code>read.table()</code> are the default values for all of the family members unless otherwise specified for a given function. Let's take a look at 2 examples:</p> <ol> <li> <p>The separator </p> <ul> <li>in the case of <code>read.table()</code> it is <code>sep = \"\"</code> (space or tab)</li> <li>whereas for <code>read.csv()</code> it is <code>sep = \",\"</code> (a comma).</li> </ul> </li> <li> <p>The <code>header</code> </p> <p>This argument refers to the column headers that may (<code>TRUE</code>) or may not (<code>FALSE</code>) exist in the plain text file you are reading in. </p> <ul> <li>in the case of <code>read.table()</code> it is <code>header = FALSE</code> (by default, it assumes you do not have column names)</li> <li>whereas for <code>read.csv()</code> it is <code>header = TRUE</code> (by default, it assumes that all your columns have names listed). </li> </ul> </li> </ol> <p>The take-home from the \"Usage\" section for <code>read.csv()</code> is that it has one mandatory argument, the path to the file and filename in quotations; in our case that is <code>data/mouse_exp_design.csv</code> or <code>data/mouse_exp_design.txt</code>.</p> <p>The <code>stringsAsFactors</code> argument</p> <p>Note that the <code>read.table {utils}</code> family of functions has an argument called <code>stringsAsFactors</code>, which by default will take the value of <code>default.stringsAsFactors()</code>. </p> <p>Type out <code>default.stringsAsFactors()</code> in the console to check what the default value is for your current R session. Is it <code>TRUE</code> or <code>FALSE</code>?</p> <p>If <code>default.stringsAsFactors()</code> is set to <code>TRUE</code>, then <code>stringsAsFactors = TRUE</code>. In that case any function in this family of functions will coerce <code>character</code> columns in the data you are reading in to <code>factor</code> columns (i.e. coerce from <code>vector</code> to <code>factor</code>) in the resulting data frame. </p> <p>If you want to maintain the <code>character vector</code> data structure (e.g. for gene names), you will want to make sure that <code>stringsAsFactors = FALSE</code> (or that <code>default.stringsAsFactors()</code> is set to <code>FALSE</code>).</p>"},{"location":"exercises/reading_in_and_data_inspection/#create-a-data-frame-by-reading-in-the-file","title":"Create a data frame by reading in the file","text":"<p>At this point, please check the extension for the <code>mouse_exp_design</code> file within your <code>data</code> folder. You will have to type it accordingly within the <code>read.csv()</code> function.</p> <p>Note</p> <p><code>read.csv</code> is not fussy about extensions for plain text files, so even though the file we are reading in is a comma-separated value file, it will be read in properly even with a <code>.txt</code> extension.</p> <p>Let's read in the <code>mouse_exp_design</code> file and create a new data frame called <code>metadata</code>.</p> <pre><code>metadata &lt;- read.csv(file=\"data/mouse_exp_design.csv\")\n\n# OR \n# metadata &lt;- read.csv(file=\"data/mouse_exp_design.txt\")\n</code></pre> <p>NOTE</p> <p>RStudio supports the automatic completion of code using the Tab key. This is especially helpful for when reading in files to ensure the correct file path. The tab completion feature also provides a shortcut to listing objects, and inline help for functions. Tab completion is your friend! We encourage you to use it whenever possible.</p> <p>Go to your Global environment and click on the name of the data frame you just created. </p> <p></p> <p>When you do this the metadata table will pop up on the top left hand corner of RStudio, right next to the R script.</p> <p></p> <p>You should see a subtle coloring (blue-gray) of the first row and first column, the rest of the table will have a white background. This is because your first row and first columns have different properties than the rest of the table, they are the names of the rows and columns respectively. </p> <p></p> <p>Earlier we noted that the file we just read in had column names (first row of values) and how <code>read.csv()</code> deals with \"headers\". In addition to column headers, <code>read.csv()</code> also assumes that the first column contains the row names. Not all functions in the <code>read.table()</code> family of functions will do this and depending on which one you use, you may have to specify an additional argument to properly assign the row names and column names.</p> <p>Note</p> <p>Row names and column names are really handy when subsetting data structures and they are also helpful to identify samples or genes. We almost always use them with data frames.</p> <p>Exercise 1</p> <ol> <li>Download this tab-delimited <code>.txt</code> file and save it in your  project's <code>data</code> folder.</li> <li>Read it in to R using <code>read.table()</code> with the approriate arguments and store it as the variable <code>proj_summary</code>. To figure out the appropriate arguments to use with <code>read.table()</code>, keep the following in mind:<ul> <li>all the columns in the input text file have column name/headers</li> <li>you want the first column of the text file to be used as row names (hint: look up the input for the <code>row.names =</code> argument in <code>read.table()</code>)</li> </ul> </li> <li>Display the contents of <code>proj_summary</code> in your console</li> </ol>"},{"location":"exercises/reading_in_and_data_inspection/#inspecting-data-structures","title":"Inspecting data structures","text":"<p>There are a wide selection of base functions in R that are useful for inspecting your data and summarizing it. Let's use the <code>metadata</code> file that we created to test out data inspection functions. </p> <p>Take a look at the dataframe by typing out the variable name <code>metadata</code> and pressing return; the variable contains information describing the samples in our study. Each row holds information for a single sample, and the columns contain categorical information about the sample <code>genotype</code>(WT or KO),  <code>celltype</code> (typeA or typeB), and <code>replicate number</code> (1,2, or 3).</p> <pre><code>metadata\n</code></pre> <p>Output</p> <pre><code>genotype celltype replicate\nsample1        Wt    typeA      1\nsample2        Wt    typeA      2\nsample3        Wt    typeA      3\nsample4        KO    typeA      1\nsample5        KO    typeA      2\nsample6        KO    typeA      3\nample7        Wt    typeB       1\nsample8        Wt    typeB      2\nsample9        Wt    typeB      3\nsample10       KO    typeB      1\nsample11       KO    typeB      2\nsample12       KO    typeB      3\n</code></pre> <p>Suppose we had a larger file, we might not want to display all the contents in the console. Instead we could check the top (the first 6 lines) of this <code>data.frame</code> using the function <code>head()</code>:</p> <pre><code>head(metadata)\n</code></pre>"},{"location":"exercises/reading_in_and_data_inspection/#list-of-functions-for-data-inspection","title":"List of functions for data inspection","text":"<p>We already saw how the functions <code>head()</code> and <code>str()</code> (in the releveling section) can be useful to check the content and the structure of a <code>data.frame</code>. Below is a non-exhaustive list of functions to get a sense of the content/structure of data. The list has been divided into functions that work on all types of objects, some that work only on vectors/factors (1 dimensional objects), and others that work on data frames and matrices (2 dimensional objects).</p> <p>We have some exercises below that will allow you to gain more familiarity with these. You will definitely be using some of them in the next few homework sections.</p> <ul> <li> <p>All data structures - content display:</p> <ul> <li><code>str()</code>: compact display of data contents (similar to what you see in the Global environment)</li> <li><code>class()</code>: displays the data type for vectors (e.g. character, numeric, etc.) and data structure for dataframes, matrices, lists</li> <li><code>summary()</code>: detailed display of the contents of a given object, including descriptive statistics, frequencies</li> <li><code>head()</code>:  prints the first 6 entries (elements for 1-D objects, rows for 2-D objects)</li> <li><code>tail()</code>: prints the last 6 entries (elements for 1-D objects, rows for 2-D objects)</li> </ul> </li> <li> <p>Vector and factor variables: </p> <ul> <li><code>length()</code>: returns the number of elements in a vector or factor</li> </ul> </li> <li> <p>Dataframe and matrix variables:</p> <ul> <li><code>dim()</code>: returns dimensions of the dataset (number_of_rows, number_of_columns) [Note, row numbers will always be displayed before column numbers in R]</li> <li><code>nrow()</code>: returns the number of rows in the dataset</li> <li><code>ncol()</code>: returns the number of columns in the dataset</li> <li><code>rownames()</code>: returns the row names in the dataset  </li> <li><code>colnames()</code>: returns the column names in the dataset</li> </ul> </li> </ul> <p>Exercise 2</p> <ul> <li>Use the <code>class()</code> function on <code>glengths</code> and <code>metadata</code>, how does the output differ between the two?</li> <li>Use the <code>summary()</code> function on the <code>proj_summary</code> dataframe, what is the median \"rRNA_rate\"?</li> <li>How long is the <code>samplegroup</code> factor?</li> <li>What are the dimensions of the <code>proj_summary</code> dataframe?</li> <li>When you use the <code>rownames()</code> function on <code>metadata</code>, what is the data structure of the output?</li> <li>[Optional] How many elements in (how long is) the output of <code>colnames(proj_summary)</code>? Don't count, but use another function to determine this.</li> </ul> <p>Attribution notice</p> <p>This lesson has been developed by members of the teaching team at the Harvard Chan Bioinformatics Core (HBC). These are open access materials distributed under the terms of the Creative Commons Attribution license (CC BY 4.0), which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.</p> <ul> <li>The materials used in this lesson are adapted from work that is Copyright \u00a9 Data Carpentry (http://datacarpentry.org/).      All Data Carpentry instructional material is made available under the Creative Commons Attribution license (CC BY 4.0).</li> </ul>"},{"location":"lessons/00_workshop_schedule/","title":"00 workshop schedule","text":"Workshop Schedule"},{"location":"lessons/00_workshop_schedule/#day-1","title":"Day-1","text":"Lesson Overview Instructor Time 1. Workshop Introduction Welcome and housekeeping Will 10:00-10:30 2. Intro to R and RStudio Introduction to R and RStudio Noor 10:30-11:45 3. Self learning materials Overview of self-learning materials Will 11:45-12:00"},{"location":"lessons/00_workshop_schedule/#before-the-next-class","title":"Before the next class","text":"<p>Work through the exercises below and copy over your solutions using the submit link.</p> <p>If you get stuck due to an error while running code in the lesson, email us</p> <ul> <li> <p>R Syntax and Data Structure</p> About data types and data structure <p>In order to utilize R effectively, you will need to understand what types of data you can use in R and also how you can store data in \"objects\" or \"variables\".</p> <p>This lesson will cover:</p> <ul> <li> <p>Assigning a value to a object</p> </li> <li> <p>What types of information can you store in R</p> </li> <li> <p>What are the different objects that you can use to store data in R</p> </li> </ul> </li> <li> <p>Functions and Arguments</p> Functions and Arguments in R <p>Functions are the basic \"commands\" used in R to get something done. To use functions (denoted by function_name followed by \"()\"), one has to enter some information within the parenthesis and optionally some arguments to change the default behavior of a function.</p> <p>You can also create your own functions! When you want to perform a task or a series of tasks more than once, creating a custom function is the best way to go.</p> <p>In this lesson you will explore:</p> <ul> <li> <p>Using built-in functions</p> </li> <li> <p>Creating your own custom functions</p> </li> </ul> </li> <li> <p>Reading in and inspecting data</p> Read and inspect data structures in R <p>When using R, it is almost a certainty that you will have to bring data into the R environment.</p> <p>In this lesson you will learn:</p> <ul> <li> <p>Reading different types (formats) of data</p> </li> <li> <p>Inspecting the contents and structure of the dataset once you have read it in</p> </li> </ul> </li> <li> <p>Submit here</p> <p>Submit a day before the next class.</p> </li> </ul>"},{"location":"lessons/00_workshop_schedule/#day-2","title":"Day-2","text":"Lesson Overview Instructor Time 4. Review self-learning Questions about self-learning All 10:00-10:50 5. In-class exercises  Use and customize function and arguments Noor 10:50-11:15 6. Data Wrangling Subsetting Vectors and Factors Will 11:15-12:00"},{"location":"lessons/00_workshop_schedule/#before-the-next-class_1","title":"Before the next class","text":"<p>Work through the exercises below and copy over your solutions using the submit link.</p> <p>If you get stuck due to an error while running code in the lesson, email us</p> <ul> <li> <p>Packages and libraries</p> Installing and loading packages in R <p>Base R is incredibly powerful, but it cannot do everything. R has been built to encourage community involvement in expanding functionality. Thousands of supplemental add-ons, also called \"packages\" have been contributed by the community. Each package comprises of several functions that enable users to perform their desired analysis.</p> <p>This lesson will cover:</p> <ul> <li> <p>Descriptions of package repositories</p> </li> <li> <p>Installing a package</p> </li> <li> <p>Loading a package</p> </li> <li> <p>Accessing the documention for your installed packages and getting help</p> </li> </ul> </li> <li> <p>Data wrangling: data frames, matrics and lists</p> Subset, merge, and create new datasets <p>In class we covered data wrangling (extracting/subsetting) information from single-dimensional objects (vectors, factors). The next step is to learn how to wrangle data in two-dimensional objects.</p> <p>This lesson will cover:</p> <ul> <li> <p>Examining and extracting values from two-dimensional data structures using indices, row names, or column names</p> </li> <li> <p>Retreiving information from lists</p> </li> </ul> </li> <li> <p>The %in% operator</p> <code>%in%</code> operator, <code>any</code> and <code>all</code> functions <p>Very often you will have to compare two vectors to figure out if, and which, values are common between them. The %in% operator can be used for this purpose.</p> <p>This lesson will cover:</p> <ul> <li> <p>Implementing the %in% operator to evaluate two vectors</p> </li> <li> <p>Distinguishing %in% from == and other logical operators</p> </li> <li> <p>Using any() and all() functions</p> </li> </ul> </li> <li> <p>Reordering and matching</p> Ordering of vectors and data frames <p>Sometimes you will want to rearrange values within a vector (row names or column names). The match() function can be very powerful for this task.</p> <p>This lesson will cover:</p> <ul> <li> <p>Maunually rearranging values within a vector</p> </li> <li> <p>Implementing the match() function to automatically rearrange the values within a vector</p> </li> </ul> </li> <li> <p>Data frame for plotting</p> Learn about <code>map()</code> function for iterative tasks <p>We will be starting with visualization in the next class. To set up for this, you need to create a new metadata data frame with information from the counts data frame. You will need to use a function over every column within the counts data frame iteratively. You could do that manually, but it is error-prone; the map() family of functions makes this more efficient.</p> <p>This lesson will cover:</p> <ul> <li> <p>Utilizing map_dbl() to take the average of every column in a data frame</p> </li> <li> <p>Briefly discuss other functions within the map() family of functions</p> </li> <li> <p>Create a new data frame for plotting</p> </li> </ul> </li> <li> <p>Submit here</p> <p>Submit a day before the next class.</p> </li> </ul>"},{"location":"lessons/00_workshop_schedule/#day-3","title":"Day-3","text":"Lesson Overview Instructor Time 7. Review self-learning Questions about self-learning All 10:00-10:35 8. In-class exercises  Customizing functions and arguments Will 10:50-11:15 9. Plotting with ggplot2 ggplot2 for data visualization Noor 11:15-12:00"},{"location":"lessons/00_workshop_schedule/#before-the-next-class_2","title":"Before the next class","text":"<p>Work through the exercises below and copy over your solutions using the submit link.</p> <p>If you get stuck due to an error while running code in the lesson, email us</p> <ul> <li> <p>Custom functions for plots</p> Consistent formats for plotting <p>When creating your plots in ggplot2 you may want to have consistent formatting (using theme() functions) across your plots, e.g. if you are generating plots for a manuscript.</p> <p>This lesson will cover:</p> <ul> <li>Developing a custom function for creating consistently formatted plots</li> </ul> </li> <li> <p>Boxplot with ggplot2</p> Customizing barplots with ggplot2 <p>Previously, you created a scatterplot using ggplot2. However, ggplot2 can be used to create a very wide variety of plots. One of the other frequently used plots you can create with ggplot2 is a barplot.</p> <p>This lesson will cover:</p> <ul> <li>Creating and customizing a barplot using ggplot2  </li> </ul> </li> <li> <p>Exporting files and plots</p> Writing files and plots in different formats <p>Now that you have completed some analysis in R, you will need to eventually export that work out of R/RStudio. R provides lots of flexibility in what and how you export your data and plots.</p> <p>This lesson will cover:</p> <ul> <li> <p>Exporting your figures from R using a variety of file formats</p> </li> <li> <p>Writing your data from R to a file</p> </li> </ul> </li> <li> <p>Finding help</p> How to best look for help <p>Hopefully, this course has given you the basic tools you need to be successful when using R. However, it would be impossible to cover every aspect of R and you will need to be able to troubleshoot future issues as they arise.</p> <p>This lesson will cover:</p> <ul> <li> <p>Suggestions for how to best ask for help</p> </li> <li> <p>Where to look for help</p> </li> </ul> </li> <li> <p>Tidyverse</p> Data wrangling within Tidyverse <p>The Tidyverse suite of integrated packages are designed to work together to make common data science operations more user friendly. Tidyverse is becoming increasingly prevalent and it is necessary that R users are conversant in the basics of Tidyverse. We have already used two Tidyverse packages in this workshop (ggplot2 and purrr) and in this lesson we will learn some key features from a few additional packages that make up Tidyverse.</p> <p>This lesson will cover:</p> <ul> <li> <p>Usage of pipes for connecting together multiple commands</p> </li> <li> <p>Tibbles for two-dimensional data storage</p> </li> <li> <p>Data wrangling within Tidyverse</p> </li> </ul> </li> <li> <p>Submit here</p> <p>Submit a day before the next class.</p> </li> </ul>"},{"location":"lessons/00_workshop_schedule/#day-4","title":"Day-4","text":"Lesson Overview Instructor Time 10. Review self-learning Questions about self-learning All 10:00-10:35 11. In-class exercises  In class exercises Will 10:50-11:15 12. Discussion Q&amp;A Noor 11:15 - 11:45 13. Wrap Up Wrap up and checking out Noor 11:45 - 12:00"},{"location":"lessons/00_workshop_schedule/#additional-exercises-and-answer-keys","title":"Additional exercises and answer keys","text":"<ul> <li> <p>Final Exercises</p> </li> <li> <p>Answer Keys</p> </li> </ul>"},{"location":"lessons/00_workshop_schedule/#additional-resources","title":"Additional resources","text":"<ul> <li> <p>Building on the basic R knowledge</p> <ul> <li>DGE workshop</li> <li>Single-cell RNA-seq workshop</li> <li>RMarkdown</li> <li>Functional analysis</li> <li>More ggplot2</li> <li>ggplot2 cookbook</li> <li>Running R and Rstudio on O2</li> </ul> </li> <li> <p>Resources</p> <ul> <li>Online learning resources</li> <li>All hbctraining materials</li> </ul> <p>Cheatsheets</p> <ul> <li>base R cheatsheet</li> <li>RStudio cheatsheet</li> <li>ggplot2 cheatsheet</li> </ul> </li> </ul> <p>Citation</p> <ul> <li> <p>To cite material from this course in your publications, please use:</p> <p>Meeta Mistry, Mary Piper, Jihe Liu, &amp; Radhika Khetani. (2021, May 5). hbctraining/Intro-to-R-flipped: R workshop first release. Zenodo. https://doi.org/10.5281/zenodo.4739342</p> </li> <li> <p>A lot of time and effort went into the preparation of these materials. Citations help us understand the needs of the community, gain recognition for our work, and attract further funding to support our teaching activities. Thank you for citing this material if it helped you in your data analysis.</p> </li> </ul> <p>Attribution notice</p> <ul> <li> <p>These materials have been developed by members of the teaching team at the Harvard Chan Bioinformatics Core (HBC). These are open access materials distributed under the terms of the Creative Commons Attribution license (CC BY 4.0), which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.</p> </li> <li> <p>Some materials used in these lessons were derived from work that is Copyright \u00a9 Data Carpentry. All Data Carpentry instructional material is made available under the Creative Commons Attribution license (CC BY 4.0)</p> </li> </ul>"},{"location":"lessons/02_introR-R-and-RStudio/","title":"Introduction to R and RStudio","text":"<p>Approximate time: 45 minutes</p>"},{"location":"lessons/02_introR-R-and-RStudio/#learning-objectives","title":"Learning Objectives","text":"<ul> <li>Describe what R and RStudio are.</li> <li>Interact with R using RStudio.</li> <li>Familiarize various components of RStudio.</li> <li>Employ variables in R.</li> </ul>"},{"location":"lessons/02_introR-R-and-RStudio/#what-is-r","title":"What is R?","text":"<p>The common misconception is that R is a programming language but in fact it is much more than that. Think of R as an environment for statistical computing and graphics, which brings together a number of features to provide powerful functionality.</p> <p>The R environment combines:</p> <ul> <li>effective handling of big data </li> <li>collection of integrated tools</li> <li>graphical facilities</li> <li>simple and effective programming language</li> </ul>"},{"location":"lessons/02_introR-R-and-RStudio/#why-use-r","title":"Why use R?","text":"<p>R is a powerful, extensible environment. It has a wide range of statistics and general data analysis and visualization capabilities.</p> <ul> <li>Data handling, wrangling, and storage</li> <li>Wide array of statistical methods and graphical techniques available</li> <li>Easy to install on any platform and use (and it\u2019s free!)</li> <li>Open source with a large and growing community of peers</li> </ul> <p>Examples of R used in the media and science\"  </p> <ul> <li> <p>\"At the BBC data team, we have developed an R package and an R cookbook to make the process of creating publication-ready graphics in our in-house style...\" - BBC Visual and Data Journalism cookbook for R graphics</p> </li> <li> <p>\"R package of data and code behind the stories and interactives at FiveThirtyEight.com, a data-driven journalism website founded by Nate Silver (initially began as a polling aggregation site, but now covers politics, sports, science and pop culture) and owned by ESPN...\" - fivethirtyeight Package</p> </li> <li> <p>Single Cell RNA-seq Data analysis with Seurat</p> </li> </ul>"},{"location":"lessons/02_introR-R-and-RStudio/#what-is-rstudio","title":"What is RStudio?","text":"<p>RStudio is freely available open-source Integrated Development Environment (IDE). RStudio provides an environment with many features to make using R easier and is a great alternative to working on R in the terminal.</p> <p></p> <ul> <li>Graphical user interface, not just a command prompt</li> <li>Great learning tool</li> <li>Free for academic use</li> <li>Platform agnostic</li> <li>Open source</li> </ul>"},{"location":"lessons/02_introR-R-and-RStudio/#creating-a-new-project-directory-in-rstudio","title":"Creating a new project directory in RStudio","text":"<p>Let's create a new project directory for our <code>Introduction to R</code> lesson today. </p> <ol> <li>Open RStudio.</li> <li>Go to the <code>File</code> menu and select <code>New Project</code>.</li> <li>In the <code>New Project</code> window, choose <code>New Directory</code>. Then, choose <code>New Project</code>. Name your new directory <code>Intro-to-R</code> and then \"Create the project as subdirectory of:\" the Desktop (or location of your choice).</li> <li>Click on <code>Create Project</code>.</li> </ol> <p></p> <ol> <li>After your project is completed, if the project does not automatically open in RStudio, then go to the <code>File</code> menu, select <code>Open Project</code>, and choose <code>Intro-to-R.Rproj</code>.</li> <li>When RStudio opens, you will see three panels in the window.</li> <li>Go to the <code>File</code> menu and select <code>New File</code>, and select <code>R Script</code>.</li> <li>Go to the <code>File</code> menu and select <code>Save As...</code>, type <code>Intro-to-R.R</code> and select <code>Save</code></li> </ol> <p></p> <p>The RStudio interface should now look like the screenshot below.</p> <p></p>"},{"location":"lessons/02_introR-R-and-RStudio/#what-is-a-project-in-rstudio","title":"What is a project in RStudio?","text":"<p>It is simply a directory that contains everything related your analyses for a specific project. RStudio projects are useful when you are working on context-specific analyses and you wish to keep them separate. When creating a project in RStudio you associate it with a working directory of your choice (either an existing one, or a new one). A <code>. RProj file</code> is created within that directory and that keeps track of your command history and variables in the environment. The <code>. RProj file</code> can be used to open the project in its current state but at a later date.</p> <p>When a project is (re)opened within RStudio the following actions are taken:</p> <ul> <li>A new R session (process) is started</li> <li>The .RData file in the project's main directory is loaded, populating the environment with any objects that were present when the project was closed. </li> <li>The .Rhistory file in the project's main directory is loaded into the RStudio History pane (and used for Console Up/Down arrow command history).</li> <li>The current working directory is set to the project directory.</li> <li>Previously edited source documents are restored into editor tabs</li> <li>Other RStudio settings (e.g. active tabs, splitter positions, etc.) are restored to where they were the last time the project was closed.</li> </ul> <p>Information adapted from RStudio Support Site</p>"},{"location":"lessons/02_introR-R-and-RStudio/#rstudio-interface","title":"RStudio Interface","text":"<p>The RStudio interface has four main panels:</p> <ol> <li>Console: where you can type commands and see output. The console is all you would see if you ran R in the command line without RStudio.</li> <li>Script editor: where you can type out commands and save to file. You can also submit the commands to run in the console.</li> <li>Environment/History: environment shows all active objects and history keeps track of all commands run in console</li> <li>Files/Plots/Packages/Help</li> </ol>"},{"location":"lessons/02_introR-R-and-RStudio/#organizing-and-setting-up-rstudio","title":"Organizing and Setting up RStudio","text":""},{"location":"lessons/02_introR-R-and-RStudio/#viewing-your-working-directory","title":"Viewing your working directory","text":"<p>Before we organize our working directory, let's check to see where our current working directory is located by typing into the console:</p> <pre><code>getwd()\n</code></pre> <p>Your working directory should be the <code>Intro-to-R</code> folder constructed when you created the project. The working directory is where RStudio will automatically look for any files you bring in and where it will automatically save any files you create, unless otherwise specified.</p> <p>You can visualize your working directory by selecting the <code>Files</code> tab from the Files/Plots/Packages/Help window.</p> <p></p> <p>If you wanted to choose a different directory to be your working directory, you could navigate to a different folder in the <code>Files</code> tab, then, click on the <code>More</code> dropdown menu which appears as a Cog and select <code>Set As Working Directory</code>.</p> <p></p>"},{"location":"lessons/02_introR-R-and-RStudio/#structuring-your-working-directory","title":"Structuring your working directory","text":"<p>To organize your working directory for a particular analysis, you should separate the original data (raw data) from intermediate datasets. For instance, you may want to create a <code>data/</code> directory within your working directory that stores the raw data, and have a <code>results/</code> directory for intermediate datasets and a <code>figures/</code> directory for the plots you will generate.</p> <p></p> <p>Let's create these three directories within your working directory by clicking on <code>New Folder</code> within the <code>Files</code> tab. </p> <p>When finished, your working directory should look like:</p> <p></p>"},{"location":"lessons/02_introR-R-and-RStudio/#setting-up","title":"Setting up","text":"<p>This is more of a housekeeping task. We will be writing long lines of code in our script editor and want to make sure that the lines <code>wrap</code> and you don't have to scroll back and forth to look at your long line of code. </p> <p>Click on <code>Edit</code> at the top of your RStudio screen and click on <code>Preferences...</code> in the pull down menu. </p> <p>On the left, select <code>Code</code> and put a check against <code>Soft-wrap R source files</code>. Make sure you click the <code>Apply</code> button at the bottom of the Window before saying <code>OK</code>.</p> <p></p>"},{"location":"lessons/02_introR-R-and-RStudio/#interacting-with-r","title":"Interacting with R","text":"<p>Now that we have our interface and directory structure set up, let's start playing with R! There are two main ways of interacting with R in RStudio: using the console or by using script editor (plain text files that contain your code).</p>"},{"location":"lessons/02_introR-R-and-RStudio/#console-window","title":"Console window","text":"<p>The console window (in RStudio, the bottom left panel) is the place where R is waiting for you to tell it what to do, and where it will show the results of a command.  You can type commands directly into the console, but they will be forgotten when you close the session. </p> <p>Let's test it out: <pre><code>3 + 5\n</code></pre></p> <p></p>"},{"location":"lessons/02_introR-R-and-RStudio/#script-editor","title":"Script editor","text":"<p>Best practice is to enter the commands in the script editor, and save the script. You are encouraged to comment liberally to describe the commands you are running using <code>#</code>. This way, you have a complete record of what you did, you can easily show others how you did it and you can do it again later on if needed. </p> <p>Now let's try entering commands to the script editor and using the comments character <code>#</code> to add descriptions and run the code chunk.</p> <pre><code># Intro to R Lesson\n# Feb 16th, 2016\n# Interacting with R\n\n## I am adding 3 and 5. R is fun!\n3+5\n</code></pre> <p>The Rstudio script editor allows you to 'send' the current line or the currently highlighted text to the R console by clicking on the <code>Run</code> button in the upper-right hand corner of the script editor.</p> <p></p> <p>Alternatively, you can run by simply pressing the <code>Ctrl</code> and <code>Return/Enter</code> keys at the same time as a shortcut.</p> <p></p> <p>You should see the command run in the console and output the result.</p> <p> |</p> <p>What happens if we do that same command without the comment symbol <code>#</code>? Re-run the command after removing the <code>#</code> sign in the front:</p> <pre><code>I am adding 3 and 5. R is fun!\n3+5\n</code></pre> <p>Error</p> <pre><code>Error: unexpected symbol in \"I am\"\n</code></pre> <p>Now R is trying to run that sentence as a command, and it  doesn't work. We get an error message in the console. It means the R interpreter did not know what to do with that command.</p>"},{"location":"lessons/02_introR-R-and-RStudio/#console-command-prompt","title":"Console command prompt","text":"<p>Interpreting the command prompt can help understand when R is ready to accept commands. Below lists the different states of the command prompt and how you can exit a command:</p> Prompt/command Meaning Remarks <code>&gt;</code> Console is ready to accept commands When the console receives a command by directly typing into the console or running from the script editor Ctrl+Enter, R will try to execute it. <code>+</code> Console is waiting for you to enter more data It means that you haven't finished entering a complete command. Often this can be due to you having not 'closed' a parenthesis or quotation. ESC To escape the command and bring back a new prompt <code>&gt;</code> If you are in Rstudio and you can't figure out why your command isn't running, click inside the console window and press ESC"},{"location":"lessons/02_introR-R-and-RStudio/#keyboard-shortcuts-in-rstudio","title":"Keyboard shortcuts in RStudio","text":"<p>In addition to some of the shortcuts described earlier in this lesson, we have listed a few more that can be helpful as you work in RStudio.</p> Key Action Ctrl+Enter Run command from script editor in console ESC Escape the current command to return to the command prompt Ctrl+1 Move cursor from console to script editor Ctrl+2 Move cursor from script editor to console Tab Use this key to complete a file path Ctrl+Shift+C Comment the block of highlighted text <p>Exercise</p> <p>Try highlighting only <code>3 +</code> from your script editor and running it. Find a way to bring back the command prompt <code>&gt;</code> in the console.</p>"},{"location":"lessons/02_introR-R-and-RStudio/#the-r-syntax","title":"The R syntax","text":"<p>Now that we know how to talk with R via the script editor or the console, we want to use R for something more than adding numbers. To do this, we need to know more about the R syntax. </p> <p>The main parts of speech in R (syntax) include:</p> <ul> <li>The comments <code>#</code> and how they are used to document function and its content</li> <li>variables and functions</li> <li>The assignment operator <code>&lt;-</code></li> <li>the <code>=</code> for arguments in functions</li> </ul> <p>We will go through each of these parts of speech in more detail, starting with the assignment operator.</p> <p>Note</p> <p>Indentation and consistency in spacing is used to improve clarity and legibility.</p>"},{"location":"lessons/02_introR-R-and-RStudio/#assignment-operator","title":"Assignment operator","text":"<p>To do useful and interesting things in R, we need to assign values to variables using the assignment operator, <code>&lt;-</code>.  For example, we can use the assignment operator to assign the value of <code>3</code> to <code>x</code> by executing:</p> <pre><code>x &lt;- 3\n</code></pre> <p>The assignment operator (<code>&lt;-</code>) assigns values on the right to variables on the left. </p> <p>Note</p> <p>In RStudio, typing Alt + - (push <code>Alt</code> at the same time as the <code>-</code> key), on Mac type option + - will write <code>&lt;-</code> in a single keystroke.</p>"},{"location":"lessons/02_introR-R-and-RStudio/#variables","title":"Variables","text":"<p>A variable is a symbolic name for (or reference to) information. Variables in computer programming are analogous to \"buckets\", where information can be maintained and referenced. On the outside of the bucket is a name. When referring to the bucket, we use the name of the bucket, not the data stored in the bucket.</p> <p>In the example above, we created a variable or a 'bucket' called <code>x</code>. Inside we put a value, <code>3</code>. </p> <p>Let's create another variable called <code>y</code> and give it a value of 5. </p> <pre><code>y &lt;- 5\n</code></pre> <p>When assigning a value to an variable, R does not print anything to the console. You can force to print the value by using parentheses or by typing the variable name.</p> <p><pre><code>y\n</code></pre> </p> <p>You can also view information on the variable by looking in your <code>Environment</code> window in the upper right-hand corner of the RStudio interface.</p> <p>Now we can reference these buckets by name to perform mathematical operations on the values contained within. What do you get in the console for the following operation: </p> <pre><code>x + y\n</code></pre> <p>Try assigning the results of this operation to another variable called <code>number</code>. </p> <pre><code>number &lt;- x + y\n</code></pre> <p>Exercise</p> <ol> <li>Try changing the value of the variable <code>x</code> to 5. What happens to <code>number</code>?</li> <li>Now try changing the value of variable <code>y</code> to contain the value 10. What do you need to do, to update the variable <code>number</code>?</li> </ol> <p>Tips on variable names</p> <p>Variables can be given almost any name, such as <code>x</code>, <code>current_temperature</code>, or <code>subject_id</code>. However, there are some rules / suggestions you should keep in mind:</p> <ul> <li>Make your names explicit and not too long.</li> <li>Avoid names starting with a number (<code>2x</code> is not valid but <code>x2</code> is)</li> <li>Avoid names of fundamental functions in R (e.g., <code>if</code>, <code>else</code>, <code>for</code>, see here for a complete list). In general, even if it's allowed, it's best to not use other function names (e.g., <code>c</code>, <code>T</code>, <code>mean</code>, <code>data</code>) as variable names. When in doubt check the help to see if the name is already in use. </li> <li>Avoid dots (<code>.</code>) within a variable name as in <code>my.dataset</code>. There are many functions in R with dots in their names for historical reasons, but because dots have a special meaning in R (for methods) and other programming languages, it's best to avoid them. </li> <li>Use nouns for object names and verbs for function names</li> <li>Keep in mind that R is case sensitive (e.g., <code>genome_length</code> is different from <code>Genome_length</code>)</li> <li>Be consistent with the styling of your code (where you put spaces, how you name variable, etc.). In R, two popular style guides are Hadley Wickham's style guide and Google's.</li> </ul>"},{"location":"lessons/02_introR-R-and-RStudio/#interacting-with-data-in-r","title":"Interacting with data in R","text":"<p>R is commonly used for handling big data, and so it only makes sense that we learn about R in the context of some kind of relevant data. Let's take a few minutes to add files to the folders we created and familiarize ourselves with the data.</p>"},{"location":"lessons/02_introR-R-and-RStudio/#adding-files-to-your-working-directory","title":"Adding files to your working directory","text":"<p>You can access the files we need for this workshop using the links provided below. If you right click on the link, and \"Save link as..\". Choose <code>~/Desktop/Intro-to-R/data</code> as the destination of the file. You should now see the file appear in your working directory. We will discuss these files a bit later in the lesson.</p> Data Download links Normalized count data Right click &amp; Save link as... Metadata file Right click &amp; Save link as... Functional analysis output Right click &amp; Save link as... <p>NOTE</p> <p>If the files download automatically to some other location on your laptop, you can move them to the your working directory using your file explorer or finder (outside RStudio), or navigating to the files in the <code>Files</code> tab of the bottom right panel of RStudio.</p>"},{"location":"lessons/02_introR-R-and-RStudio/#about-the-dataset","title":"About the dataset","text":"<p>The count data </p> <p>In this example dataset, we have collected whole brain samples from 12 mice and want to evaluate expression differences between them. The expression data represents normalized count data obtained from RNA-sequencing of the 12 brain samples. This data is stored in a comma separated values (CSV) file as a 2-dimensional matrix, with each row corresponding to a gene and each column corresponding to a sample </p> <p></p> <p>The metadata</p> <p>  We have another file in which we identify information about the data or metadata. Our metadata is also stored in a CSV file. In this file, each row corresponds to a sample and each column contains some information about each sample.</p> <p>The first column contains the row names, and note that these are identical to the column names in our expression data file above (albeit, in a slightly different order). The next few columns contain information about our samples that allow us to categorize them. For example, the second column contains genotype information for each sample. Each sample is classified in one of two categories: Wt (wild type) or KO (knockout). What types of categories do you observe in the remaining columns?</p> <p>R is particularly good at handling this type of categorical data. Rather than simply storing this information as text, the data is represented in a specific data structure which allows the user to sort and manipulate the data in a quick and efficient manner. We will discuss this in more detail as we go through the different lessons in R! </p>"},{"location":"lessons/02_introR-R-and-RStudio/#the-functional-analysis-results","title":"The functional analysis results","text":"<p>We will be using the results of the functional analysis to learn about packages/functions from the Tidyverse suite of integrated packages. These packages are designed to work together to make common data science operations like data wrangling, tidying, reading/writing, parsing, and visualizing, more user-friendly. </p>"},{"location":"lessons/02_introR-R-and-RStudio/#best-practices","title":"Best practices","text":"<p>Before we move on to more complex concepts and getting familiar with the language, we want to point out a few things about best practices when working with R which will help you stay organized in the long run</p> <ul> <li> <p>Code and workflow are more reproducible if we can document everything that we do. Our end goal is not just to \"do stuff\", but to do it in a way that anyone can easily and exactly replicate our workflow and results. All code should be written in the script editor and saved to file, rather than working in the console.</p> </li> <li> <p>The R console should be mainly used to inspect objects, test a function or get help. </p> </li> <li> <p>Use <code>#</code> signs to comment. Comment liberally in your R scripts. This will help future you and other collaborators know what each line of code (or code block) was meant to do. Anything to the right of a <code>#</code> is ignored by R. A shortcut for this is Ctrl+Shift+C if you want to comment an entire chunk of text.</p> </li> </ul> <p>Attribution notice</p> <ul> <li> <p>This lesson has been developed by members of the teaching team at the Harvard Chan Bioinformatics Core (HBC). These are open access materials distributed under the terms of the Creative Commons Attribution license (CC BY 4.0), which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.</p> </li> <li> <p>The materials used in this lesson are adapted from work that is Copyright \u00a9 Data Carpentry (http://datacarpentry.org/).All Data Carpentry instructional material is made available under the Creative Commons Attribution license (CC BY 4.0).</p> </li> </ul>"},{"location":"lessons/05_in_class_exercises/","title":"Day 2: In class activities","text":""},{"location":"lessons/05_in_class_exercises/#making-custom-functions","title":"Making Custom Functions","text":"<p>Create a function <code>temp_conv()</code>, which converts the temperature in Fahrenheit (input) to the temperature in Kelvin (output). </p> Hints <p><ul><li>We could perform a two-step calculation: first convert from Fahrenheit to Celsius, and then convert from Celsius to Kelvin.</li><li>The formula for these two calculations are as follows: temp_c = (temp_f - 32) * 5 / 9; temp_k = temp_c + 273.15.</li><li> To test your function: </li><li>if your input is 70, the result of <code>temp_conv(70)</code> should be 294.2611.</li></ul></p>"},{"location":"lessons/05_in_class_exercises/#nesting-functions","title":"Nesting Functions","text":"<p>Now we want to round the temperature in Kelvin (output of <code>temp_conv()</code>) to a single decimal place. </p> More Hints <p>Use the <code>round()</code> function with the newly-created  <code>temp_conv()</code> function to achieve this in one line of code. If your input is 70, the output should now be 294.3.</p> Solution <p>Part 1 <pre><code>    temp_conv &lt;- function(temp_f) {\n        temp_c = (temp_f - 32) * 5 / 9\n        temp_k = temp_c + 273.15\n    return (temp_k)\n     }\n</code></pre> Part 2 <pre><code>    round(temp_conv(70), digits = 1)\n</code></pre></p> <p>Attribution notice</p> <ul> <li> <p>This lesson has been developed by members of the teaching team at the Harvard Chan Bioinformatics Core (HBC). These are open access materials distributed under the terms of the Creative Commons Attribution license (CC BY 4.0), which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.</p> </li> <li> <p>The materials used in this lesson are adapted from work that is Copyright \u00a9 Data Carpentry (http://datacarpentry.org/).All Data Carpentry instructional material is made available under the Creative Commons Attribution license (CC BY 4.0).</p> </li> </ul>"},{"location":"lessons/06_data_wrangling/","title":"Data subsetting with base R: vectors and factors","text":"<p>Approximate time: 60 min</p>"},{"location":"lessons/06_data_wrangling/#learning-objectives","title":"Learning Objectives","text":"<ul> <li>Demonstrate how to subset vectors and factors</li> <li>Explain the use of logical operators when subsetting vectors and factors</li> <li>Demonstrate how to relevel factors in a desired order</li> </ul>"},{"location":"lessons/06_data_wrangling/#selecting-data-using-indices-and-sequences","title":"Selecting data using indices and sequences","text":"<p>When analyzing data, we often want to partition the data so that we are only working with selected columns or rows. A data frame or data matrix is simply a collection of vectors combined together. So let's begin with vectors and how to access different elements, and then extend those concepts to dataframes.</p>"},{"location":"lessons/06_data_wrangling/#vectors","title":"Vectors","text":""},{"location":"lessons/06_data_wrangling/#selecting-using-indices","title":"Selecting using indices","text":"<p>If we want to extract one or several values from a vector, we must provide one or several indices using square brackets <code>[ ]</code> syntax. The index represents the element number within a vector (or the compartment number, if you think of the bucket analogy). R indices start at 1. Programming languages like Fortran, MATLAB, and R start counting at 1, because that's what human beings typically do. Languages in the C family (including C++, Java, Perl, and Python) count from 0 because that's simpler for computers to do.</p> <p>Let's start by creating a vector called age:</p> <pre><code>age &lt;- c(15, 22, 45, 52, 73, 81)\n</code></pre> <p></p> <p>Suppose we only wanted the fifth value of this vector, we would use the following syntax:</p> <pre><code>age[5]\n</code></pre> <p>If we wanted all values except the fifth value of this vector, we would use the following:</p> <pre><code>age[-5]\n</code></pre> <p>If we wanted to select more than one element we would still use the square bracket syntax, but rather than using a single value we would pass in a vector of several index values:</p> <pre><code>age[c(3,5,6)]   ## nested\n\n# OR\n\n## create a vector first then select\nidx &lt;- c(3,5,6) # create vector of the elements of interest\nage[idx]\n</code></pre> <p>To select a sequence of continuous values from a vector, we would use <code>:</code> which is a special function that creates numeric vectors of integer in increasing or decreasing order. Let's select the first four values from age:</p> <pre><code>age[1:4]\n</code></pre> <p>Alternatively, if you wanted the reverse could try <code>4:1</code> for instance, and see what is returned. </p> <p>Exercise</p> <ol> <li>Create a vector called alphabets with the following letters, C, D, X, L, F.</li> <li>Use the associated indices along with <code>[ ]</code> to do the following:<ul> <li>only display C, D and F</li> <li>display all except X</li> <li>display the letters in the opposite order (F, L, X, D, C)</li> </ul> </li> </ol>"},{"location":"lessons/06_data_wrangling/#selecting-using-indices-with-logical-operators","title":"Selecting using indices with logical operators","text":"<p>We can also use indices with logical operators. Logical operators include greater than (&gt;), less than (&lt;), and equal to (==). A full list of logical operators in R is displayed below:</p> Operator Description <code>&gt;</code> greater than <code>&gt;=</code> greater than or equal to <code>&lt;</code> less than <code>&lt;=</code> less than or equal to <code>==</code> equal to <code>!=</code> not equal to <code>&amp;</code> and <code>|</code> or <p>We can use logical expressions to determine whether a particular condition is true or false. For example, let's use our age vector: </p> <pre><code>age\n</code></pre> <p>If we wanted to know if each element in our age vector is greater than 50, we could write the following expression: </p> <pre><code>age &gt; 50\n</code></pre> <p>Returned is a vector of logical values the same length as age with TRUE and FALSE values indicating whether each element in the vector is greater than 50.</p> <pre><code>[1] FALSE FALSE FALSE  TRUE  TRUE  TRUE\n</code></pre> <p>We can use these logical vectors to select only the elements in a vector with TRUE values at the same position or index as in the logical vector.</p> <p>Select all values in the <code>age</code> vector over 50 or <code>age</code> less than 18:</p> <pre><code>age &gt; 50 | age &lt; 18\n\nage\n\nage[age &gt; 50 | age &lt; 18]  ## nested\n\n# OR\n\n## create a vector first then select\nidx &lt;- age &gt; 50 | age &lt; 18\nage[idx]\n</code></pre>"},{"location":"lessons/06_data_wrangling/#indexing-with-logical-operators-using-the-which-function","title":"Indexing with logical operators using the <code>which()</code> function","text":"<p>While logical expressions will return a vector of TRUE and FALSE  values of the same length, we could use the <code>which()</code> function to output the indices where the values are TRUE. Indexing with either method generates the same results, and personal preference determines which method you choose to use. For example:</p> <pre><code>which(age &gt; 50 | age &lt; 18)\n\nage[which(age &gt; 50 | age &lt; 18)]  ## nested\n\n# OR\n\n## create a vector first then select\nidx_num &lt;- which(age &gt; 50 | age &lt; 18)\nage[idx_num]\n</code></pre> <p>Notice that we get the same results regardless of whether or not we use the <code>which()</code>. Also note that while <code>which()</code> works the same as the logical expressions for indexing, it can be used for multiple other operations, where it is not interchangeable with logical expressions.</p>"},{"location":"lessons/06_data_wrangling/#factors","title":"Factors","text":"<p>Since factors are special vectors, the same rules for selecting values using indices apply. The elements of the expression factor created previously had the following categories or levels: low, medium, and high. </p> <p>Let's extract the values of the factor with high expression, and let's using nesting here:</p> <pre><code>expression[expression == \"high\"]    ## This will only return those elements in the factor equal to \"high\"\n</code></pre> <p>Nesting note</p> <p>The piece of code above was more efficient with nesting; we used a single step instead of two steps as shown below:</p> <p>Step1 (no nesting): <code>idx &lt;- expression == \"high\"</code></p> <p>Step2 (no nesting): <code>expression[idx]</code></p> <p>Exercise</p> <p>Extract only those elements in <code>samplegroup</code> that are not KO (nesting the logical operation is optional).</p>"},{"location":"lessons/06_data_wrangling/#releveling-factors","title":"Releveling factors","text":"<p>We have briefly talked about factors, but this data type only becomes more intuitive once you've had a chance to work with it.  Let's take a slight detour and learn about how to relevel categories within a factor. </p> <p>To view the integer assignments under the hood you can use <code>str()</code>:</p> <p><pre><code>expression\n\nstr(expression)\nFactor w/ 3 levels \"high\",\"low\",\"medium\": 2 1 3 1 2 3 1\n</code></pre> The categories are referred to as factor levels. As we learned earlier, the levels in the <code>expression</code> factor were assigned integers alphabetically, with <code>high=1</code>, <code>low=2</code>, <code>medium=3</code>. However, it makes more sense for us if <code>low=1</code>, <code>medium=2</code> and <code>high=3</code>, i.e. it makes sense for us to relevel the categories in this factor.</p> <p>To relevel the categories, you can add the <code>levels</code> argument to the <code>factor()</code> function, and give it a vector with the categories listed in the required order:</p> <pre><code>expression &lt;- factor(expression, levels=c(\"low\", \"medium\", \"high\"))     # you can re-factor a factor \n\nstr(expression)\nFactor w/ 3 levels \"low\",\"medium\",..: 1 3 2 3 1 2 3\n</code></pre> <p>Now we have a releveled factor with low as the lowest or first category, medium as the second and high as the third. This is reflected in the way they are listed in the output of <code>str()</code>, as well as in the numbering of which category is where in the factor.</p> <p>Note</p> <p>Releveling becomes necessary when you need a specific category in a factor to be the \"base\" category, i.e. category that is equal to 1. One example would be if you need the \"control\" to be the \"base\" in a given RNA-seq experiment.</p> <p>Exercise</p> <p>Use the <code>samplegroup</code> factor we created in a previous lesson, and relevel it such that KO is the first level followed by CTL and OE. </p> <p>Attribution notice</p> <p>This lesson has been developed by members of the teaching team at the Harvard Chan Bioinformatics Core (HBC). These are open access materials distributed under the terms of the Creative Commons Attribution license (CC BY 4.0), which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.</p> <ul> <li>*The materials used in this lesson are adapted from work that is Copyright \u00a9 Data Carpentry (http://datacarpentry.org/).</li> </ul> <p>All Data Carpentry instructional material is made available under the Creative Commons Attribution license (CC BY 4.0).*</p>"},{"location":"lessons/08_in_class_exercises/","title":"Day 3: In class activities","text":""},{"location":"lessons/08_in_class_exercises/#reading-in-and-inspecting-data","title":"Reading in and inspecting data","text":"<ul> <li>Download the data and place the file into the <code>data</code> directory.</li> </ul> Data Download link Animal data Right click &amp; Save link as... <p>Exercise</p> <ul> <li>Read the <code>.csv</code> file into your environment and assign it to a variable called <code>animals</code>. Be sure to check that your row names are the different animals.</li> <li>Check to make sure that <code>animals</code> is a dataframe.</li> <li>How many rows are in the <code>animals</code> dataframe? How many columns?</li> </ul>"},{"location":"lessons/08_in_class_exercises/#data-wrangling","title":"Data wrangling","text":"<p>Exercise</p> <ol> <li>Extract the <code>speed</code> value of 40 km/h from the <code>animals</code> dataframe.</li> <li>Return the rows with animals that are the <code>color</code> Tan.</li> <li>Return the rows with animals that have <code>speed</code> greater than 50 km/h and output only the <code>color</code> column. Keep the output as a data frame.  </li> <li>Change the color of \"Grey\" to \"Gray\". </li> <li>Create a list called <code>animals_list</code> in which the first element contains the speed column of the <code>animals</code> dataframe and the second element contains the color column of the <code>animals</code> dataframe. </li> <li>Give each element of your list the appropriate name (i.e speed and color).</li> </ol>"},{"location":"lessons/08_in_class_exercises/#the-in-operator-reordering-and-matching","title":"The <code>%in%</code> operator, reordering and matching","text":"<p>In your environment you should have a dataframe called <code>proj_summary</code> which contains quality metric information for an RNA-seq dataset. We have obtained batch information for the control samples in this dataset. </p> <p>Exercise</p> <ol> <li>Copy and paste the code below to create a dataframe of control samples with the associated batch information <pre><code>ctrl_samples &lt;- data.frame(row.names = c(\"sample3\", \"sample10\", \"sample8\", \"sample4\", \"sample15\"), date = c(\"01/13/2018\", \"03/15/2018\", \"01/13/2018\", \"09/20/2018\",\"03/15/2018\"))\n</code></pre></li> <li> <p>How many of the <code>ctrl_samples</code> are also in the <code>proj_summary</code> dataframe? Use the <code>%in%</code> operator to compare sample names. </p> </li> <li> <p>Keep only the rows in <code>proj_summary</code> which correspond to those in <code>ctrl_samples</code>. Do this with the %in% operator. Save it to a variable called <code>proj_summary_ctrl</code>.</p> </li> <li> <p>We would like to add in the batch information for the samples in <code>proj_summary_ctrl</code>. Find the rows that match in <code>ctrl_samples</code>.</p> </li> <li> <p>Use <code>cbind()</code> to add a column called <code>batch</code> to the <code>proj_summary_ctrl</code> dataframe. Assign this new dataframe back to <code>proj_summary_ctrl</code>.</p> </li> </ol> Solution <pre><code>## Reading in and inspecting data\n\n# 2. Read the csv file into your environment and assign it to a variable called `animals`. Be sure to check that your row names are the different animals.\nanimals &lt;- read.csv(\"data/animals.csv\")\n\n# 3. Check to make sure that `animals` is a dataframe.\nclass(animals)\n\n# 4. How many rows are in the `animals` dataframe? How many columns?\nnrow(animals)\nncol(animals)\n\n## Data wrangling\n\n# 1. Extract the `speed` value of 40 km/h from the `animals` dataframe.\nanimals[1,1]\nanimals[which(animals$speed == 40), 1]\nanimals[which(animals$speed == 40), \"speed\"]\nanimals$speed[which(animals$speed == 40)]\n\n# 2. Return the rows with animals that are the `color` Tan.\nanimals[c(2,5),]\nanimals[which(animals$color == \"Tan\"),]\n\n# 3. Return the rows with animals that have `speed` greater than 50 km/h and output only the `color` column. Keep the output as a data frame.  \nanimals[which(animals$speed &gt; 50), \"color\", drop =F]\n\n# 4. Change the color of \"Grey\" to \"Gray\". \nanimals$color[which(animals$color == \"Grey\")] &lt;- \"Gray\"\nanimals[which(animals$color == \"Grey\"), \"color\"] &lt;- \"Gray\"\n\n# 5. Create a list called `animals_list` in which the first element contains the speed column of the `animals` dataframe and the second element contains the color column of the `animals` dataframe. \nanimals_list &lt;- list(animals$speed, animals$color)\n\n# 6. Give each element of your list the appropriate name (i.e speed and color).\nnames(animals_list) &lt;- colnames(animals)\n\n## The %in% operator, reordering and matching\n\n# 2. How many of the control samples are also in the `proj_summary` dataframe? Use the %in% operator to check.\nlength(which(rownames(ctrl_samples) %in% rownames(proj_summary)))\n\n# 3. Keep only the rows in `proj_summary` which correspond to control samples. Do this with the %in% operator. Save it to a variable called `proj_summary_ctrl`.\nproj_summary_ctrl &lt;- proj_summary[which(rownames(proj_summary) %in% rownames(ctrl_samples)),]\n\n\n# 4. We would like to add in the batch information for the samples in `proj_summary_ctrl`. Find the rows that match in `ctrl_samples`.\nm &lt;- match(rownames(proj_summary_ctrl), rownames(ctrl_samples))\n\n# 5. Use `cbind()` to add a column called `batch` to the `proj_summary_ctrl` dataframe. Assign this new dataframe back to `proj_summary_ctrl`.\nproj_summary_ctrl &lt;- cbind(proj_summary_ctrl, batch=ctrl_samples[m,])\n</code></pre>"},{"location":"lessons/08_in_class_exercises/#bonus-using-map_lgl","title":"BONUS: Using <code>map_lgl()</code>","text":"<p>Exercise</p> <ol> <li>Subset <code>proj_summary</code> to keep only the \"high\" and \"low\" samples based on the treament column. Save the new dataframe to a variable called <code>proj_summary_noctl</code>.</li> <li>Further, subset the dataframe to remove the non-numeric columns \"Quality_format\", and \"treatment\". Try to do this using the <code>map_lgl()</code> function in addition to <code>is.numeric()</code>. Save the new dataframe back to <code>proj_summary_noctl</code>.</li> </ol> Solution <pre><code>## BONUS: Using `map_lgl()` \n# 1. Subset `proj_summary` to keep only the \"high\" and \"low\" samples based on the treament column. Save the new dataframe to a variable called `proj_summary_noctl`\n\nproj_summary_noctl &lt;- proj_summary[which(proj_summary$treatment != \"control\"),]\n\n# 2. Further subset the dataframe to remove the non-numeric columns \"Quality_format\", and \"treatment\". Try to do this using the `map()` function in addition to `is.numeric()`. Save the new dataframe back to `proj_summary_noctl`\n\nkeep &lt;- map_lgl(proj_summary_noctl, is.numeric)\nproj_summary_noctl &lt;- proj_summary_noctl[,keep]\n</code></pre> <p>Attribution notice</p> <ul> <li> <p>This lesson has been developed by members of the teaching team at the Harvard Chan Bioinformatics Core (HBC). These are open access materials distributed under the terms of the Creative Commons Attribution license (CC BY 4.0), which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.</p> </li> <li> <p>The materials used in this lesson are adapted from work that is Copyright \u00a9 Data Carpentry (http://datacarpentry.org/).All Data Carpentry instructional material is made available under the Creative Commons Attribution license (CC BY 4.0).</p> </li> </ul>"},{"location":"lessons/09_plotting_with_ggplot2/","title":"Plotting and data visualization in R","text":"<p>Approximate time: 60 minutes</p>"},{"location":"lessons/09_plotting_with_ggplot2/#learning-objectives","title":"Learning Objectives","text":"<ul> <li>Explain the syntax of ggplot2</li> <li>Apply ggplot2 package to visualize data.</li> </ul>"},{"location":"lessons/09_plotting_with_ggplot2/#data-visualization-with-ggplot2","title":"Data Visualization with <code>ggplot2</code>","text":"<p>For this lesson, you will need the <code>new_metadata</code> data frame. Please download it from the link below. Right click and save link as or download file as in the data directory.</p> Data Download link Data Right click &amp; Save link as... <p>Once you have downloaded it, load it into your environment as follows:</p> <pre><code>## load the new_metadata data frame into your environment from a .RData object\nload(\"data/new_metadata.RData\")\n</code></pre> <p>Next, let's check if it was successfully loaded into the environment:</p> <pre><code># this data frame should have 12 rows and 5 columns\nView(new_metadata)\n</code></pre> <p>Great, we are now ready to move forward!</p> <p>When we are working with large sets of numbers it can be useful to display that information graphically to gain more insight. In this lesson we will be plotting with the popular Bioconductor package <code>ggplot2</code>.</p> <p>Note</p> <p>If you are interested in learning about plotting with base R functions, we have a short lesson. </p> <p>The <code>ggplot2</code> syntax takes some getting used to, but once you get it, you will find it's extremely powerful and flexible. We will start with drawing a simple x-y scatterplot of <code>samplemeans</code> versus <code>age_in_days</code> from the <code>new_metadata</code> data frame. Please note that <code>ggplot2</code> expects a \"data frame\" or \"tibble\" as input.</p> <p>Note</p> <p>You can find out more about tibbles in the lesson on tidyverse</p> <p>Let's start by loading the <code>ggplot2</code> library:</p> <pre><code>library(ggplot2)\n</code></pre> <p>The <code>ggplot()</code> function is used to initialize the basic graph structure, then we add to it. The basic idea is that you specify different parts of the plot using additional functions one after the other and combine them into a \"code chunk\" using the <code>+</code> operator; the functions in the resulting code chunk are called layers.</p> <p>Try the code below and see what happens. </p> <pre><code>ggplot(new_metadata) # what happens? \n</code></pre> <p>Metadata</p> <p>If you don't have the new_metadata object, you can right-click to download and save an <code>rds</code> file from here into the project <code>data</code> folder, and load it in using the code below: <pre><code>new_metadata &lt;- readRDS(\"data/new_metadata.rds\")`\n</code></pre></p> <p>You get an blank plot, because you need to specify additional layers using the <code>+</code> operator.</p> <p>The geom (geometric) object is the layer that specifies what kind of plot we want to draw. A plot must have at least one <code>geom</code>; there is no upper limit. Examples include:</p> <ul> <li>points (<code>geom_point</code>, <code>geom_jitter</code> for scatter plots, dot plots, etc)</li> <li>lines (<code>geom_line</code>, for time series, trend lines, etc)</li> <li>boxplot (<code>geom_boxplot</code>, for, well, boxplots!)</li> </ul> <p>Let's add a \"geom\" layer to our plot using the <code>+</code> operator, and since we want a scatter plot so we will use <code>geom_point()</code>.</p> <pre><code>ggplot(new_metadata) +\n  geom_point() # note what happens here\n</code></pre> <p>Why do we get an error? Is the error message easy to decipher?</p> <p>We get an error because each type of <code>geom</code> usually has a required set of aesthetics to be set. \"Aesthetics\" are set with the <code>aes()</code> function and can be set either nested within <code>geom_point()</code> (applies only to that layer) or within <code>ggplot()</code> (applies to the whole plot).</p> <p>The <code>aes()</code> function has many different arguments, and all of those arguments take columns from the original data frame as input. It can be used to specify many plot elements including the following:</p> <ul> <li>position (i.e., on the x and y axes)</li> <li>color (\"outside\" color)</li> <li>fill (\"inside\" color) </li> <li>shape (of points)</li> <li>linetype</li> <li>size</li> </ul> <p>To start, we will specify x- and y-axis since <code>geom_point</code> requires the most basic information about a scatterplot, i.e. what you want to plot on the x and y axes. All of the other plot elements mentioned above are optional.</p> <pre><code>ggplot(new_metadata) +\n     geom_point(aes(x = age_in_days, y= samplemeans))\n</code></pre> <p> </p> <p>Now that we have the required aesthetics, let's add some extras like color to the plot. We can <code>color</code> the points on the plot based on the genotype column within <code>aes()</code>. You will notice that there are a default set of colors that will be used so we do not have to specify. Note that the legend has been conveniently plotted for us.</p> <pre><code>ggplot(new_metadata) +\n  geom_point(aes(x = age_in_days, y= samplemeans, color = genotype)) \n</code></pre> <p> </p> <p>Let's try to have both celltype and genotype represented on the plot. To do this we can assign the <code>shape</code> argument in <code>aes()</code> the celltype column, so that each celltype is plotted with a different shaped data point. </p> <pre><code>ggplot(new_metadata) +\n  geom_point(aes(x = age_in_days, y= samplemeans, color = genotype,\n            shape=celltype)) \n</code></pre> <p> </p> <p>The data points are quite small. We can adjust the size of the data points within the <code>geom_point()</code> layer, but it should not be within <code>aes()</code> since we are not mapping it to a column in the input data frame, instead we are just specifying a number. </p> <pre><code>ggplot(new_metadata) +\n  geom_point(aes(x = age_in_days, y= samplemeans, color = genotype,\n            shape=celltype), size=2.25) \n</code></pre> <p> </p> <p>The labels on the x- and y-axis are also quite small and hard to read. To change their size, we need to add an additional theme layer. The ggplot2 <code>theme</code> system handles non-data plot elements such as:</p> <ul> <li>Axis label aesthetics</li> <li>Plot background</li> <li>Facet label backround</li> <li>Legend appearance</li> </ul> <p>There are built-in themes we can use (i.e. <code>theme_bw()</code>) that mostly change the background/foreground colours, by adding it as additional layer. Or we can adjust specific elements of the current default theme by adding the <code>theme()</code> layer and passing in arguments for the things we wish to change. Or we can use both.</p> <p>Let's add a layer <code>theme_bw()</code>. </p> <pre><code>ggplot(new_metadata) +\n  geom_point(aes(x = age_in_days, y= samplemeans, color = genotype,\n            shape=celltype), size=3.0) +\n  theme_bw() \n</code></pre> <p>Do the axis labels or the tick labels get any larger by changing themes?</p> <p>No, they don't. But, we can add arguments using <code>theme()</code> to change the size of axis labels ourselves. Since we will be adding this layer \"on top\", or after <code>theme_bw()</code>, any features we change will override what is set by the <code>theme_bw()</code> layer. </p> <p>Let's increase the size of both the axes titles to be 1.5 times the default size. When modifying the size of text the <code>rel()</code> function is commonly used to specify a change relative to the default.</p> <pre><code>ggplot(new_metadata) +\n  geom_point(aes(x = age_in_days, y= samplemeans, color = genotype,\n            shape=celltype), size=2.25) +\n  theme_bw() +\n  theme(axis.title = element_text(size=rel(1.5)))           \n</code></pre> <p> </p> <p>Notes</p> <ul> <li>You can use the <code>example(\"geom_point\")</code> function here to explore a multitude of different aesthetics and layers that can be added to your plot. As you scroll through the different plots, take note of how the code is modified. You can use this with any of the different geometric object layers available in ggplot2 to learn how you can easily modify your plots! </li> <li>RStudio provide this very useful cheatsheet for plotting using <code>ggplot2</code>. Different example plots are provided and the associated code (i.e which <code>geom</code> or <code>theme</code> to use in the appropriate situation.) We also encourage you to peruse through this useful online reference for working with ggplot2.</li> </ul> <p>Exercise</p> <ol> <li>The current axis label text defaults to what we gave as input to <code>geom_point</code> (i.e the column headers). We can change this by adding additional layers called <code>xlab()</code> and <code>ylab()</code> for the x- and y-axis, respectively. Add these layers to the current plot such that the x-axis is labeled \"Age (days)\" and the y-axis is labeled \"Mean expression\".</li> <li>Use the <code>ggtitle</code> layer to add a plot title of your choice. </li> <li>Add the following new layer to the code chunk <code>theme(plot.title=element_text(hjust=0.5))</code>.<ul> <li>What does it change?</li> <li>How many theme() layers can be added to a ggplot code chunk, in your estimation?</li> </ul> </li> </ol> <p>Attribution notice</p> <p>This lesson has been developed by members of the teaching team at the Harvard Chan Bioinformatics Core (HBC). These are open access materials distributed under the terms of the Creative Commons Attribution license (CC BY 4.0), which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.</p>"},{"location":"lessons/11_in_class_exercises/","title":"Day 4 Activities","text":"<p>Exercise</p> <ul> <li>Change the <code>animals</code> data frame to a tibble called <code>animals_tb</code>. Save the row names to a column called <code>animal_names</code> before turning it into a tibble.</li> </ul> <p></p> <ul> <li>Use ggplot2 to plot the animal names (x-axis) versus the speed of the animal (y-axis) in <code>animals_tb</code> using a scatterplot. Customize the plot to display as shown below.</li> </ul> <p></p> <ul> <li> <p>We decide that our plot would look better with the animal names ordered from slowest to fastest. Using the <code>animals_tb</code> tibble, reorder the animals on the x-axis to start with the slowest animal on the left-hand side of the plot to the fastest animal on the right-hand side of the plot by completing the following steps:</p> <p>a. Use the <code>arrange()</code> function to order the rows by speed from slowest to fastest. Then use the <code>pull()</code> function to extract the <code>animal_names</code> column as a vector of character values. Save the new variable as <code>names_ordered_by_speed</code>.</p> <p>b. Turn the <code>animal_names</code> column of <code>animals_tb</code> into a factor and specify the levels as <code>names_ordered_by_speed</code> from slowest to fastest (output in part a). Note: this step is crucial, because ggplot2 uses <code>factor</code> as plotting order, instead of the order we observe in data frame.</p> <p>c. Re-plot the scatterplot with the animal names in order from slowest to fastest.</p> </li> </ul> <p></p> <p>Note: If you are interested in exploring other ways to reorder a variable in ggplot2, refer to this post.</p> <ul> <li> <p>Save the plot as a PDF called <code>animals_by_speed_scatterplot.pdf</code> to the <code>results</code> folder.</p> </li> <li> <p>Use the functions from the <code>dplyr</code> package to perform the following tasks:</p> <p>a. Extract the rows of <code>animals_tb</code> tibble with color of gray or tan, order the rows based from slowest to fastest speed, and save to a variable called <code>animals_gray_tan</code>.</p> <p>b. Save <code>animals_gray_tan</code> as a comma-separated value file called <code>animals_tb_ordered.csv</code> to the <code>results</code> folder. </p> </li> </ul> <p></p> Solution  <pre><code>#1. Change the animals data frame to a tibble called animals_tb. Save the row names to a column called animal_names before turning it into a tibble.\nanimals_tb &lt;- animals %&gt;%\n    rownames_to_column(var = \"animal_names\") %&gt;%\n    as_tibble()\n\n#2. Use ggplot2 to plot the animal names (x-axis) versus the speed of the animal (y-axis) in animals_tb using a scatterplot. Customize the plot to display as shown below.\nggplot(animals_tb) +\n    geom_point(aes(x = animal_names, y = speed), color = \"purple\") +\n    theme_bw() +\n    ggtitle(\"Speed Comparisons Between Animals\") + \n    ylab(\"Speed (km/h)\") +\n    xlab(\"Animal\") +\n    theme(plot.title=element_text(hjust=0.5))\n\n#3. We decide that our plot would look better with the animal names ordered from slowest to fastest. Using the animals_tb tibble, reorder the animals on the x-axis to start with the slowest animal on the left-hand side of the plot to the fastest animal on the right-hand side of the plot by completing the following steps:\n\n#a. Use the `arrange()` function to order the rows by speed from slowest to fastest. Then use the `pull()` function to extract the `animal_names` column as a vector of character values. Save the new variable as `names_ordered_by_speed`.\n\nnames_ordered_by_speed &lt;- animals_tb %&gt;% arrange(speed) %&gt;% pull(animal_names)\n\n#b. Turn the `animal_names` column of `animals_tb` into a factor and specify the levels as `names_ordered_by_speed` from slowest to fastest (output in part a). Note: this step is crucial, because ggplot2 uses `factor` as plotting order, instead of the order we observe in data frame.\nanimals_tb$animal_names &lt;- factor(animals_tb$animal_names, \n                              levels = names_ordered_by_speed)\n\n#c. Re-plot the scatterplot with the animal names in order from slowest to fastest.\nggplot(animals_tb) +\n    geom_point(aes(x = animal_names, y = speed), color = \"purple\") +\n    theme_bw() +\n    ggtitle(\"Speed Comparisons Between Animals\") + \n    ylab(\"Speed (km/h)\") +\n    xlab(\"Animal\") +\n    theme(plot.title=element_text(hjust=0.5))\n\n#4. Save the plot as a PDF called animals_by_speed_scatterplot.pdf to the results folder.\npdf(\"results/animals_by_speed_scatterplot.pdf\")\n\nggplot(animals_tb) +\n    geom_point(aes(x = animal_names, y = speed), color = \"purple\") +\n    theme_bw() +\n    ggtitle(\"Speed Comparisons Between Animals\") + \n    ylab(\"Speed (km/h)\") +\n    xlab(\"Animal\") +\n    theme(plot.title=element_text(hjust=0.5))\n\ndev.off()\n\n#5. Use the functions from the dplyr package to perform the following tasks:\n\n#a. Extract the rows of animals_tb tibble with color of gray or tan, order the rows based from slowest to fastest speed, and save to a variable called animals_gray_tan.\n\nanimals_gray_tan &lt;- animals_tb %&gt;% \n    filter(color == \"Gray\" | color == \"Tan\") %&gt;%\n    arrange(speed)\n\n#b. Save animals_gray_tan as a comma-separated value file called animals_tb_ordered.csv to the results folder.\n\nwrite.csv(animals_gray_tan,\n      file = \"results/animals_tb_ordered.csv\",\n      quote = FALSE)\n</code></pre>   * * *   !!! quote \"Attribution notice\"     * *This lesson has been developed by members of the teaching team at the [Harvard Chan Bioinformatics Core (HBC)](http://bioinformatics.sph.harvard.edu/). These are open access materials distributed under the terms of the [Creative Commons Attribution license](https://creativecommons.org/licenses/by/4.0/) (CC BY 4.0), which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.*      * *The materials used in this lesson are adapted from work that is Copyright \u00a9 Data Carpentry (http://datacarpentry.org/).All Data Carpentry instructional material is made available under the [Creative Commons Attribution license](https://creativecommons.org/licenses/by/4.0/) (CC BY 4.0).*"}]}